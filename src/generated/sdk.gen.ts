// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { ListCantonsData, ListCantonsResponses, ListCantonsErrors, ListCountriesData, ListCountriesResponses, ListCountriesErrors, ListLanguagesData, ListLanguagesResponses, ListLanguagesErrors, ListActivitiesData, ListActivitiesResponses, ListActivitiesErrors, ListCriteriaData, ListCriteriaResponses, ListCriteriaErrors, GetSustainabilityFormMappingsData, GetSustainabilityFormMappingsResponses, GetSustainabilityFormMappingsErrors, ListCpvCodesData, ListCpvCodesResponses, ListCpvCodesErrors, FindCpvCodesData, FindCpvCodesResponses, FindCpvCodesErrors, ListCpcCodesData, ListCpcCodesResponses, ListCpcCodesErrors, ListBkpCodesData, ListBkpCodesResponses, ListBkpCodesErrors, FindBkpCodesData, FindBkpCodesResponses, FindBkpCodesErrors, ListNpkCodesData, ListNpkCodesResponses, ListNpkCodesErrors, FindNpkCodesData, FindNpkCodesResponses, FindNpkCodesErrors, ListEbkptCodesData, ListEbkptCodesResponses, ListEbkptCodesErrors, FindEbkptCodesData, FindEbkptCodesResponses, FindEbkptCodesErrors, ListEbkphCodesData, ListEbkphCodesResponses, ListEbkphCodesErrors, FindEbkphCodesData, FindEbkphCodesResponses, FindEbkphCodesErrors, ListOagCodesData, ListOagCodesResponses, ListOagCodesErrors, FindOagCodesData, FindOagCodesResponses, FindOagCodesErrors, ListInstitutionsData, ListInstitutionsResponses, ListInstitutionsErrors, GetInstitutionByIdData, GetInstitutionByIdResponses, GetInstitutionByIdErrors, FindPoInInstitutionTreeData, FindPoInInstitutionTreeResponses, FindPoInInstitutionTreeErrors, SearchUsersData, SearchUsersResponses, SearchUsersErrors, ExportAllUsersData, ExportAllUsersResponses, ExportAllUsersErrors, GetUserByIdData, GetUserByIdResponses, GetUserByIdErrors, DeleteMyUserData, DeleteMyUserResponses, DeleteMyUserErrors, GetMyUserData, GetMyUserResponses, GetMyUserErrors, EditMyUserData, EditMyUserResponses, EditMyUserErrors, ImpersonateUserData, ImpersonateUserResponses, ImpersonateUserErrors, RefreshTokenImpersonatedUserData, RefreshTokenImpersonatedUserResponses, RefreshTokenImpersonatedUserErrors, SearchUsersWithOrgAndRoleData, SearchUsersWithOrgAndRoleResponses, SearchUsersWithOrgAndRoleErrors, GetMyOrganizationMembershipsData, GetMyOrganizationMembershipsResponses, GetMyOrganizationMembershipsErrors, DeleteMyOrganizationMembershipData, DeleteMyOrganizationMembershipResponses, DeleteMyOrganizationMembershipErrors, GetCompCentresData, GetCompCentresResponses, GetCompCentresErrors, FindProcOfficesOfMyCompCentreData, FindProcOfficesOfMyCompCentreResponses, FindProcOfficesOfMyCompCentreErrors, GetCompCentreData, GetCompCentreResponses, GetCompCentreErrors, UpdateCompCentreData, UpdateCompCentreResponses, UpdateCompCentreErrors, AddCompCentreMemberData, AddCompCentreMemberResponses, AddCompCentreMemberErrors, RemoveCompCentreMemberData, RemoveCompCentreMemberResponses, RemoveCompCentreMemberErrors, GetCompCentreMembersData, GetCompCentreMembersResponses, GetCompCentreMembersErrors, SearchAttachedUsersData, SearchAttachedUsersResponses, SearchAttachedUsersErrors, SearchRemediesNoticeTemplatesByCompCentreData, SearchRemediesNoticeTemplatesByCompCentreResponses, SearchRemediesNoticeTemplatesByCompCentreErrors, DeleteRemediesNoticeTemplateInCompCentreData, DeleteRemediesNoticeTemplateInCompCentreResponses, DeleteRemediesNoticeTemplateInCompCentreErrors, GetRemediesNoticeTemplateByCompCentreData, GetRemediesNoticeTemplateByCompCentreResponses, GetRemediesNoticeTemplateByCompCentreErrors, UpdateRemediesNoticeTemplateForCompCentreData, UpdateRemediesNoticeTemplateForCompCentreResponses, UpdateRemediesNoticeTemplateForCompCentreErrors, CreateRemediesNoticeTemplateForCompCentreData, CreateRemediesNoticeTemplateForCompCentreResponses, CreateRemediesNoticeTemplateForCompCentreErrors, SearchPubDraftTemplatesByCompCentreData, SearchPubDraftTemplatesByCompCentreResponses, SearchPubDraftTemplatesByCompCentreErrors, DeleteContactInCompCentreData, DeleteContactInCompCentreResponses, DeleteContactInCompCentreErrors, UpdateContactForCompCentreData, UpdateContactForCompCentreResponses, UpdateContactForCompCentreErrors, CreateContactForCompCentreData, CreateContactForCompCentreResponses, CreateContactForCompCentreErrors, DeleteUrlInCompCentreData, DeleteUrlInCompCentreResponses, DeleteUrlInCompCentreErrors, UpdateUrlForCompCentreData, UpdateUrlForCompCentreResponses, UpdateUrlForCompCentreErrors, CreateUrlForCompCentreData, CreateUrlForCompCentreResponses, CreateUrlForCompCentreErrors, ReorderCompCentreUrlsData, ReorderCompCentreUrlsResponses, ReorderCompCentreUrlsErrors, ListPubDraftsOfCompCentreToPublishData, ListPubDraftsOfCompCentreToPublishResponses, ListPubDraftsOfCompCentreToPublishErrors, DeletePublicationDateRuleData, DeletePublicationDateRuleResponses, DeletePublicationDateRuleErrors, CreatePublicationDateRuleData, CreatePublicationDateRuleResponses, CreatePublicationDateRuleErrors, DeletePublicationDateExceptionData, DeletePublicationDateExceptionResponses, DeletePublicationDateExceptionErrors, CreatePublicationDateExceptionData, CreatePublicationDateExceptionResponses, CreatePublicationDateExceptionErrors, SearchProcOfficesData, SearchProcOfficesResponses, SearchProcOfficesErrors, GetProcOfficeTreeViewData, GetProcOfficeTreeViewResponses, GetProcOfficeTreeViewErrors, GetMyProcOfficeData, GetMyProcOfficeResponses, GetMyProcOfficeErrors, GetProcOfficeData, GetProcOfficeResponses, GetProcOfficeErrors, UpdateProcOfficeData, UpdateProcOfficeResponses, UpdateProcOfficeErrors, CreateProcOfficeData, CreateProcOfficeResponses, CreateProcOfficeErrors, AcceptRequestToJoinOrganizationData, AcceptRequestToJoinOrganizationResponses, AcceptRequestToJoinOrganizationErrors, RejectRequestToJoinOrganizationData, RejectRequestToJoinOrganizationResponses, RejectRequestToJoinOrganizationErrors, RequestToJoinProcOfficeData, RequestToJoinProcOfficeResponses, RequestToJoinProcOfficeErrors, ListMembersData, ListMembersResponses, ListMembersErrors, RespondToRequestData, RespondToRequestResponses, RespondToRequestErrors, RemoveProcOfficeMemberData, RemoveProcOfficeMemberResponses, RemoveProcOfficeMemberErrors, GetMemberByIdData, GetMemberByIdResponses, GetMemberByIdErrors, UpdateProcurementMembersRolesData, UpdateProcurementMembersRolesResponses, UpdateProcurementMembersRolesErrors, GetProcurementProjectOverviewData, GetProcurementProjectOverviewResponses, GetProcurementProjectOverviewErrors, GetProjectHeaderByIdData, GetProjectHeaderByIdResponses, GetProjectHeaderByIdErrors, GetProcOfficeUserNotificationSettingsData, GetProcOfficeUserNotificationSettingsResponses, GetProcOfficeUserNotificationSettingsErrors, UpdateProcOfficeUserNotificationSettingsData, UpdateProcOfficeUserNotificationSettingsResponses, UpdateProcOfficeUserNotificationSettingsErrors, ArchiveProcOfficeProjectData, ArchiveProcOfficeProjectResponses, ArchiveProcOfficeProjectErrors, SearchRemediesNoticeTemplatesByProcOfficeData, SearchRemediesNoticeTemplatesByProcOfficeResponses, SearchRemediesNoticeTemplatesByProcOfficeErrors, GetRemediesNoticeTemplateByProcOfficeData, GetRemediesNoticeTemplateByProcOfficeResponses, GetRemediesNoticeTemplateByProcOfficeErrors, SearchPubDraftTemplatesByProcOfficeData, SearchPubDraftTemplatesByProcOfficeResponses, SearchPubDraftTemplatesByProcOfficeErrors, GetVendorsInvolvedInProjectData, GetVendorsInvolvedInProjectResponses, GetVendorsInvolvedInProjectErrors, InvolveVendorInProjectData, InvolveVendorInProjectResponses, InvolveVendorInProjectErrors, InviteVendorToProjectData, InviteVendorToProjectResponses, InviteVendorToProjectErrors, MarkOfferExternalSubmissionForVendorData, MarkOfferExternalSubmissionForVendorResponses, MarkOfferExternalSubmissionForVendorErrors, MarkParticipationExternalSubmissionForVendorData, MarkParticipationExternalSubmissionForVendorResponses, MarkParticipationExternalSubmissionForVendorErrors, MarkRequestForInformationExternalSubmissionForVendorData, MarkRequestForInformationExternalSubmissionForVendorResponses, MarkRequestForInformationExternalSubmissionForVendorErrors, SendMessageToInvolvedVendorsData, SendMessageToInvolvedVendorsResponses, SendMessageToInvolvedVendorsErrors, GetQnaRoundsData, GetQnaRoundsResponses, GetQnaRoundsErrors, GetParticipationProtocolData, GetParticipationProtocolResponses, GetParticipationProtocolErrors, GetOfferProtocolData, GetOfferProtocolResponses, GetOfferProtocolErrors, SearchProjectDocumentsData, SearchProjectDocumentsResponses, SearchProjectDocumentsErrors, GetProjectDocumentsZipTokenData, GetProjectDocumentsZipTokenResponses, GetProjectDocumentsZipTokenErrors, DeleteProjectDocumentData, DeleteProjectDocumentResponses, DeleteProjectDocumentErrors, UpdateProjectDocumentMetadataData, UpdateProjectDocumentMetadataResponses, UpdateProjectDocumentMetadataErrors, UploadProjectDocumentData, UploadProjectDocumentResponses, UploadProjectDocumentErrors, ListProjectContributorsData, ListProjectContributorsResponses, ListProjectContributorsErrors, RemoveProjectContributorData, RemoveProjectContributorResponses, RemoveProjectContributorErrors, AddProjectContributorData, AddProjectContributorResponses, AddProjectContributorErrors, PatchInternalReferenceData, PatchInternalReferenceResponses, PatchInternalReferenceErrors, GetProcOfficeVendorDigitalSubmissionsData, GetProcOfficeVendorDigitalSubmissionsResponses, GetProcOfficeVendorDigitalSubmissionsErrors, OpenVendorDigitalSubmissionsData, OpenVendorDigitalSubmissionsResponses, OpenVendorDigitalSubmissionsErrors, FindVendorsData, FindVendorsResponses, FindVendorsErrors, DeleteVendorData, DeleteVendorResponses, DeleteVendorErrors, GetVendorData, GetVendorResponses, GetVendorErrors, UpdateVendorData, UpdateVendorResponses, UpdateVendorErrors, CreateVendorData, CreateVendorResponses, CreateVendorErrors, GetVendorPublicData, GetVendorPublicResponses, GetVendorPublicErrors, VerifyVendorUidData, VerifyVendorUidResponses, VerifyVendorUidErrors, VerifyVendorDunsData, VerifyVendorDunsResponses, VerifyVendorDunsErrors, GetMyVendorData, GetMyVendorResponses, GetMyVendorErrors, RequestToJoinVendorData, RequestToJoinVendorResponses, RequestToJoinVendorErrors, ListVendorMembersData, ListVendorMembersResponses, ListVendorMembersErrors, RespondToVendorJoinRequestData, RespondToVendorJoinRequestResponses, RespondToVendorJoinRequestErrors, RemoveVendorMemberData, RemoveVendorMemberResponses, RemoveVendorMemberErrors, UpdatePublicVendorMembersData, UpdatePublicVendorMembersResponses, UpdatePublicVendorMembersErrors, UpdateVendorMembersRolesData, UpdateVendorMembersRolesResponses, UpdateVendorMembersRolesErrors, SimapAdminFindVendorsData, SimapAdminFindVendorsResponses, SimapAdminFindVendorsErrors, GetVendorProjectOverviewData, GetVendorProjectOverviewResponses, GetVendorProjectOverviewErrors, GetQnaRoundsForProjectData, GetQnaRoundsForProjectResponses, GetQnaRoundsForProjectErrors, SearchDocumentsForProjectData, SearchDocumentsForProjectResponses, SearchDocumentsForProjectErrors, GetVendorProjectsDocumentsZipTokenData, GetVendorProjectsDocumentsZipTokenResponses, GetVendorProjectsDocumentsZipTokenErrors, GetVendorUserNotificationSettingsData, GetVendorUserNotificationSettingsResponses, GetVendorUserNotificationSettingsErrors, UpdateVendorUserNotificationSettingsData, UpdateVendorUserNotificationSettingsResponses, UpdateVendorUserNotificationSettingsErrors, ArchiveVendorProjectData, ArchiveVendorProjectResponses, ArchiveVendorProjectErrors, ListVendorDocumentsData, ListVendorDocumentsResponses, ListVendorDocumentsErrors, DeleteVendorDocumentData, DeleteVendorDocumentResponses, DeleteVendorDocumentErrors, DownloadVendorDocumentData, DownloadVendorDocumentResponses, DownloadVendorDocumentErrors, GetVendorDocumentDownloadTokenData, GetVendorDocumentDownloadTokenResponses, GetVendorDocumentDownloadTokenErrors, UploadVendorDocumentData, UploadVendorDocumentResponses, UploadVendorDocumentErrors, UpdateInterestInProjectData, UpdateInterestInProjectResponses, UpdateInterestInProjectErrors, DeclineInvitationToProjectData, DeclineInvitationToProjectResponses, DeclineInvitationToProjectErrors, GetPublicProjectSearchData, GetPublicProjectSearchResponses, GetPublicProjectSearchErrors, GetPublicationDetailData, GetPublicationDetailResponses, GetPublicationDetailErrors, GetPublicProjectHeaderByIdData, GetPublicProjectHeaderByIdResponses, GetPublicProjectHeaderByIdErrors, GetPastPublicationsData, GetPastPublicationsResponses, GetPastPublicationsErrors, GetMySubscriptionData, GetMySubscriptionResponses, GetMySubscriptionErrors, DeleteSubscriptionData, DeleteSubscriptionResponses, DeleteSubscriptionErrors, GetSubscriptionData, GetSubscriptionResponses, GetSubscriptionErrors, CreateOrUpdateSubscriptionData, CreateOrUpdateSubscriptionResponses, CreateOrUpdateSubscriptionErrors, DeletePubDraftData, DeletePubDraftResponses, DeletePubDraftErrors, GetPubDraftBaseData, GetPubDraftBaseResponses, GetPubDraftBaseErrors, CreatePubDraftBaseData, CreatePubDraftBaseResponses, CreatePubDraftBaseErrors, CopyPubDraftData, CopyPubDraftResponses, CopyPubDraftErrors, GetPubDraftDetailData, GetPubDraftDetailResponses, GetPubDraftDetailErrors, GetWizardStateData, GetWizardStateResponses, GetWizardStateErrors, UpdateWizardStateData, UpdateWizardStateResponses, UpdateWizardStateErrors, SubmitPubDraftData, SubmitPubDraftResponses, SubmitPubDraftErrors, WithdrawSubmittedPubDraftData, WithdrawSubmittedPubDraftResponses, WithdrawSubmittedPubDraftErrors, PatchPubDraftTranslationLanguagesData, PatchPubDraftTranslationLanguagesResponses, PatchPubDraftTranslationLanguagesErrors, ReorderPubDraftLotsData, ReorderPubDraftLotsResponses, ReorderPubDraftLotsErrors, DeletePubDraftLotData, DeletePubDraftLotResponses, DeletePubDraftLotErrors, GetPubDraftTenderProjectInfoData, GetPubDraftTenderProjectInfoResponses, GetPubDraftTenderProjectInfoErrors, PatchPubDraftTenderProjectInfoData, PatchPubDraftTenderProjectInfoResponses, PatchPubDraftTenderProjectInfoErrors, GetPubDraftTenderDatesData, GetPubDraftTenderDatesResponses, GetPubDraftTenderDatesErrors, PatchPubDraftTenderDatesData, PatchPubDraftTenderDatesResponses, PatchPubDraftTenderDatesErrors, GetPubDraftTenderProcurementData, GetPubDraftTenderProcurementResponses, GetPubDraftTenderProcurementErrors, PatchPubDraftTenderProcurementData, PatchPubDraftTenderProcurementResponses, PatchPubDraftTenderProcurementErrors, GetPubDraftTenderCriteriaData, GetPubDraftTenderCriteriaResponses, GetPubDraftTenderCriteriaErrors, PatchPubDraftTenderCriteriaData, PatchPubDraftTenderCriteriaResponses, PatchPubDraftTenderCriteriaErrors, GetPubDraftTenderTermsData, GetPubDraftTenderTermsResponses, GetPubDraftTenderTermsErrors, PatchPubDraftTenderTermsData, PatchPubDraftTenderTermsResponses, PatchPubDraftTenderTermsErrors, GetPubDraftTenderLotData, GetPubDraftTenderLotResponses, GetPubDraftTenderLotErrors, PatchPubDraftTenderLotData, PatchPubDraftTenderLotResponses, PatchPubDraftTenderLotErrors, CreatePubDraftTenderLotData, CreatePubDraftTenderLotResponses, CreatePubDraftTenderLotErrors, GetPubDraftTenderInvitedVendorsData, GetPubDraftTenderInvitedVendorsResponses, GetPubDraftTenderInvitedVendorsErrors, PatchPubDraftTenderInvitedVendorsData, PatchPubDraftTenderInvitedVendorsResponses, PatchPubDraftTenderInvitedVendorsErrors, GetPubDraftCompetitionProjectInfoData, GetPubDraftCompetitionProjectInfoResponses, GetPubDraftCompetitionProjectInfoErrors, PatchPubDraftCompetitionProjectInfoData, PatchPubDraftCompetitionProjectInfoResponses, PatchPubDraftCompetitionProjectInfoErrors, GetPubDraftCompetitionDatesData, GetPubDraftCompetitionDatesResponses, GetPubDraftCompetitionDatesErrors, PatchPubDraftCompetitionDatesData, PatchPubDraftCompetitionDatesResponses, PatchPubDraftCompetitionDatesErrors, GetPubDraftCompetitionProcurementData, GetPubDraftCompetitionProcurementResponses, GetPubDraftCompetitionProcurementErrors, PatchPubDraftCompetitionProcurementData, PatchPubDraftCompetitionProcurementResponses, PatchPubDraftCompetitionProcurementErrors, GetPubDraftCompetitionCriteriaData, GetPubDraftCompetitionCriteriaResponses, GetPubDraftCompetitionCriteriaErrors, PatchPubDraftCompetitionCriteriaData, PatchPubDraftCompetitionCriteriaResponses, PatchPubDraftCompetitionCriteriaErrors, GetPubDraftCompetitionTermsData, GetPubDraftCompetitionTermsResponses, GetPubDraftCompetitionTermsErrors, PatchPubDraftCompetitionTermsData, PatchPubDraftCompetitionTermsResponses, PatchPubDraftCompetitionTermsErrors, GetPubDraftCompetitionLotData, GetPubDraftCompetitionLotResponses, GetPubDraftCompetitionLotErrors, PatchPubDraftCompetitionLotData, PatchPubDraftCompetitionLotResponses, PatchPubDraftCompetitionLotErrors, CreatePubDraftCompetitionLotData, CreatePubDraftCompetitionLotResponses, CreatePubDraftCompetitionLotErrors, GetPubDraftCompetitionInvitedVendorsData, GetPubDraftCompetitionInvitedVendorsResponses, GetPubDraftCompetitionInvitedVendorsErrors, PatchPubDraftCompetitionInvitedVendorsData, PatchPubDraftCompetitionInvitedVendorsResponses, PatchPubDraftCompetitionInvitedVendorsErrors, GetPubDraftStudyContractProjectInfoData, GetPubDraftStudyContractProjectInfoResponses, GetPubDraftStudyContractProjectInfoErrors, PatchPubDraftStudyContractProjectInfoData, PatchPubDraftStudyContractProjectInfoResponses, PatchPubDraftStudyContractProjectInfoErrors, GetPubDraftStudyContractDatesData, GetPubDraftStudyContractDatesResponses, GetPubDraftStudyContractDatesErrors, PatchPubDraftStudyContractDatesData, PatchPubDraftStudyContractDatesResponses, PatchPubDraftStudyContractDatesErrors, GetPubDraftStudyContractProcurementData, GetPubDraftStudyContractProcurementResponses, GetPubDraftStudyContractProcurementErrors, PatchPubDraftStudyContractProcurementData, PatchPubDraftStudyContractProcurementResponses, PatchPubDraftStudyContractProcurementErrors, GetPubDraftStudyContractCriteriaData, GetPubDraftStudyContractCriteriaResponses, GetPubDraftStudyContractCriteriaErrors, PatchPubDraftStudyContractCriteriaData, PatchPubDraftStudyContractCriteriaResponses, PatchPubDraftStudyContractCriteriaErrors, GetPubDraftStudyContractTermsData, GetPubDraftStudyContractTermsResponses, GetPubDraftStudyContractTermsErrors, PatchPubDraftStudyContractTermsData, PatchPubDraftStudyContractTermsResponses, PatchPubDraftStudyContractTermsErrors, GetPubDraftStudyContractLotData, GetPubDraftStudyContractLotResponses, GetPubDraftStudyContractLotErrors, PatchPubDraftStudyContractLotData, PatchPubDraftStudyContractLotResponses, PatchPubDraftStudyContractLotErrors, CreatePubDraftStudyContractLotData, CreatePubDraftStudyContractLotResponses, CreatePubDraftStudyContractLotErrors, GetPubDraftStudyContractInvitedVendorsData, GetPubDraftStudyContractInvitedVendorsResponses, GetPubDraftStudyContractInvitedVendorsErrors, PatchPubDraftStudyContractInvitedVendorsData, PatchPubDraftStudyContractInvitedVendorsResponses, PatchPubDraftStudyContractInvitedVendorsErrors, GetPubDraftAwardProjectInfoData, GetPubDraftAwardProjectInfoResponses, GetPubDraftAwardProjectInfoErrors, PatchPubDraftAwardProjectInfoData, PatchPubDraftAwardProjectInfoResponses, PatchPubDraftAwardProjectInfoErrors, GetPubDraftAwardProcurementData, GetPubDraftAwardProcurementResponses, GetPubDraftAwardProcurementErrors, PatchPubDraftAwardProcurementData, PatchPubDraftAwardProcurementResponses, PatchPubDraftAwardProcurementErrors, GetPubDraftAwardDecisionData, GetPubDraftAwardDecisionResponses, GetPubDraftAwardDecisionErrors, PatchPubDraftAwardDecisionData, PatchPubDraftAwardDecisionResponses, PatchPubDraftAwardDecisionErrors, GetPubDraftAwardStatisticsData, GetPubDraftAwardStatisticsResponses, GetPubDraftAwardStatisticsErrors, PatchPubDraftAwardStatisticsData, PatchPubDraftAwardStatisticsResponses, PatchPubDraftAwardStatisticsErrors, GetPubDraftAwardSustainabilityFormData, GetPubDraftAwardSustainabilityFormResponses, GetPubDraftAwardSustainabilityFormErrors, PatchPubDraftAwardSustainabilityFormData, PatchPubDraftAwardSustainabilityFormResponses, PatchPubDraftAwardSustainabilityFormErrors, GetPubDraftRfiProjectInfoData, GetPubDraftRfiProjectInfoResponses, GetPubDraftRfiProjectInfoErrors, PatchPubDraftRfiProjectInfoData, PatchPubDraftRfiProjectInfoResponses, PatchPubDraftRfiProjectInfoErrors, GetPubDraftRfiDatesData, GetPubDraftRfiDatesResponses, GetPubDraftRfiDatesErrors, PatchPubDraftRfiDatesData, PatchPubDraftRfiDatesResponses, PatchPubDraftRfiDatesErrors, GetPubDraftRfiProcurementData, GetPubDraftRfiProcurementResponses, GetPubDraftRfiProcurementErrors, PatchPubDraftRfiProcurementData, PatchPubDraftRfiProcurementResponses, PatchPubDraftRfiProcurementErrors, GetPubDraftRfiTermsData, GetPubDraftRfiTermsResponses, GetPubDraftRfiTermsErrors, PatchPubDraftRfiTermsData, PatchPubDraftRfiTermsResponses, PatchPubDraftRfiTermsErrors, GetPubDraftAbandonmentInfoData, GetPubDraftAbandonmentInfoResponses, GetPubDraftAbandonmentInfoErrors, PatchPubDraftAbandonmentInfoData, PatchPubDraftAbandonmentInfoResponses, PatchPubDraftAbandonmentInfoErrors, GetPubDraftRevocationData, GetPubDraftRevocationResponses, GetPubDraftRevocationErrors, PatchPubDraftRevocationData, PatchPubDraftRevocationResponses, PatchPubDraftRevocationErrors, GetPubDraftCorrectionInfoData, GetPubDraftCorrectionInfoResponses, GetPubDraftCorrectionInfoErrors, PatchPubDraftCorrectionInfoData, PatchPubDraftCorrectionInfoResponses, PatchPubDraftCorrectionInfoErrors, GetPubDraftParticipantSelectionProjectInfoData, GetPubDraftParticipantSelectionProjectInfoResponses, GetPubDraftParticipantSelectionProjectInfoErrors, PatchPubDraftParticipantSelectionProjectInfoData, PatchPubDraftParticipantSelectionProjectInfoResponses, PatchPubDraftParticipantSelectionProjectInfoErrors, GetPubDraftParticipantSelectionData, GetPubDraftParticipantSelectionResponses, GetPubDraftParticipantSelectionErrors, PatchPubDraftParticipantSelectionData, PatchPubDraftParticipantSelectionResponses, PatchPubDraftParticipantSelectionErrors, GetPubDraftSelectiveOfferingPhaseNoticeData, GetPubDraftSelectiveOfferingPhaseNoticeResponses, GetPubDraftSelectiveOfferingPhaseNoticeErrors, PatchPubDraftSelectiveOfferingPhaseNoticeData, PatchPubDraftSelectiveOfferingPhaseNoticeResponses, PatchPubDraftSelectiveOfferingPhaseNoticeErrors, GetPubDraftSelectiveOfferingPhaseDatesData, GetPubDraftSelectiveOfferingPhaseDatesResponses, GetPubDraftSelectiveOfferingPhaseDatesErrors, PatchPubDraftSelectiveOfferingPhaseDatesData, PatchPubDraftSelectiveOfferingPhaseDatesResponses, PatchPubDraftSelectiveOfferingPhaseDatesErrors, GetPubDraftSelectiveOfferingPhaseCriteriaData, GetPubDraftSelectiveOfferingPhaseCriteriaResponses, GetPubDraftSelectiveOfferingPhaseCriteriaErrors, PatchPubDraftSelectiveOfferingPhaseCriteriaData, PatchPubDraftSelectiveOfferingPhaseCriteriaResponses, PatchPubDraftSelectiveOfferingPhaseCriteriaErrors, ValidatePubDraftData, ValidatePubDraftResponses, ValidatePubDraftErrors, GetPastPublishedPubDraftsData, GetPastPublishedPubDraftsResponses, GetPastPublishedPubDraftsErrors, GetPastPublishedPubDraftActionsData, GetPastPublishedPubDraftActionsResponses, GetPastPublishedPubDraftActionsErrors, GetRolesData, GetRolesResponses, GetRolesErrors, SetRoleData, SetRoleResponses, SetRoleErrors, ListPublishersData, ListPublishersResponses, ListPublishersErrors, GetMyPublisherData, GetMyPublisherResponses, GetMyPublisherErrors, PublishAnswersData, PublishAnswersResponses, PublishAnswersErrors, DeleteQnaData, DeleteQnaResponses, DeleteQnaErrors, UpdateQnaData, UpdateQnaResponses, UpdateQnaErrors, AddQuestionData, AddQuestionResponses, AddQuestionErrors, PublishQnaData, PublishQnaResponses, PublishQnaErrors, DownloadProjectDocumentData, DownloadProjectDocumentResponses, DownloadProjectDocumentErrors, GetDownloadTokenData, GetDownloadTokenResponses, GetDownloadTokenErrors, DownloadProjectDocumentsZipData, DownloadProjectDocumentsZipResponses, DownloadProjectDocumentsZipErrors, PublishPubDraftData, PublishPubDraftResponses, PublishPubDraftErrors, MarkAsToPublishData, MarkAsToPublishResponses, MarkAsToPublishErrors, CreateAbandonmentTestScenarioData, CreateAbandonmentTestScenarioResponses, CreateAbandonmentTestScenarioErrors, CreateAdvanceNoticeTestScenarioData, CreateAdvanceNoticeTestScenarioResponses, CreateAdvanceNoticeTestScenarioErrors, CreateAwardTestScenarioData, CreateAwardTestScenarioResponses, CreateAwardTestScenarioErrors, CreateCallForBidsTestScenarioData, CreateCallForBidsTestScenarioResponses, CreateCallForBidsTestScenarioErrors, CreateCorrectionTestScenarioData, CreateCorrectionTestScenarioResponses, CreateCorrectionTestScenarioErrors, CreateDirectAwardTestScenarioData, CreateDirectAwardTestScenarioResponses, CreateDirectAwardTestScenarioErrors, CreateParticipantSelectionTestScenarioData, CreateParticipantSelectionTestScenarioResponses, CreateParticipantSelectionTestScenarioErrors, CreateSelectiveOfferingPhaseTestScenarioData, CreateSelectiveOfferingPhaseTestScenarioResponses, CreateSelectiveOfferingPhaseTestScenarioErrors, CreateRevocationTestScenarioData, CreateRevocationTestScenarioResponses, CreateRevocationTestScenarioErrors, CreateRequestForInformationTestScenarioData, CreateRequestForInformationTestScenarioResponses, CreateRequestForInformationTestScenarioErrors, ExportAwardedVendorsData, ExportAwardedVendorsResponses, ExportAwardedVendorsErrors, ExportSustainabilityFormData, ExportSustainabilityFormResponses, ExportSustainabilityFormErrors, ExportCallForBidsData, ExportCallForBidsResponses, ExportCallForBidsErrors, ExportWtoStatisticsData, ExportWtoStatisticsResponses, ExportWtoStatisticsErrors, GetContentByPageNameData, GetContentByPageNameResponses, GetContentByPageNameErrors, PatchContentByPageNameData, PatchContentByPageNameResponses, PatchContentByPageNameErrors, GetVendorDigitalSubmissionsData, GetVendorDigitalSubmissionsResponses, GetVendorDigitalSubmissionsErrors, DeleteVendorDigitalSubmissionData, DeleteVendorDigitalSubmissionResponses, DeleteVendorDigitalSubmissionErrors, GetVendorDigitalSubmissionData, GetVendorDigitalSubmissionResponses, GetVendorDigitalSubmissionErrors, CreateVendorDigitalSubmissionData, CreateVendorDigitalSubmissionResponses, CreateVendorDigitalSubmissionErrors, SubmitVendorDigitalSubmissionData, SubmitVendorDigitalSubmissionResponses, SubmitVendorDigitalSubmissionErrors, RemoveLotFromVendorDigitalSubmissionData, RemoveLotFromVendorDigitalSubmissionResponses, RemoveLotFromVendorDigitalSubmissionErrors, AddLotToVendorDigitalSubmissionData, AddLotToVendorDigitalSubmissionResponses, AddLotToVendorDigitalSubmissionErrors, GetVendorDigitalSubmissionDocumentsData, GetVendorDigitalSubmissionDocumentsResponses, GetVendorDigitalSubmissionDocumentsErrors, DeleteVendorDigitalSubmissionDocumentData, DeleteVendorDigitalSubmissionDocumentResponses, DeleteVendorDigitalSubmissionDocumentErrors, UploadVendorDigitalSubmissionDocumentData, UploadVendorDigitalSubmissionDocumentResponses, UploadVendorDigitalSubmissionDocumentErrors, AddVendorDigitalSubmissionDocumentFromVendorDocumentData, AddVendorDigitalSubmissionDocumentFromVendorDocumentResponses, AddVendorDigitalSubmissionDocumentFromVendorDocumentErrors, DownloadVendorDigitalSubmissionDocumentData, DownloadVendorDigitalSubmissionDocumentResponses, DownloadVendorDigitalSubmissionDocumentErrors, GetVendorDigitalSubmissionDocumentDownloadTokenData, GetVendorDigitalSubmissionDocumentDownloadTokenResponses, GetVendorDigitalSubmissionDocumentDownloadTokenErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get the list of cantons
 */
export const listCantons = <ThrowOnError extends boolean = false>(options?: Options<ListCantonsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCantonsResponses, ListCantonsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/cantons/v1',
        ...options
    });
};

/**
 * Get the list of countries
 */
export const listCountries = <ThrowOnError extends boolean = false>(options?: Options<ListCountriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCountriesResponses, ListCountriesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/countries/v1',
        ...options
    });
};

/**
 * Get the list of languages
 */
export const listLanguages = <ThrowOnError extends boolean = false>(options?: Options<ListLanguagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListLanguagesResponses, ListLanguagesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/languages/v1',
        ...options
    });
};

/**
 * Get the list of main activities as defined by TED (Tenders Electronic Daily)
 */
export const listActivities = <ThrowOnError extends boolean = false>(options?: Options<ListActivitiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListActivitiesResponses, ListActivitiesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/activities/v1',
        ...options
    });
};

/**
 * Get the list of predefined criteria
 */
export const listCriteria = <ThrowOnError extends boolean = false>(options?: Options<ListCriteriaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCriteriaResponses, ListCriteriaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/criteria/v1',
        ...options
    });
};

/**
 * Get sustainability form question to form type mappings
 */
export const getSustainabilityFormMappings = <ThrowOnError extends boolean = false>(options?: Options<GetSustainabilityFormMappingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSustainabilityFormMappingsResponses, GetSustainabilityFormMappingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sustainability-form/v1/mappings',
        ...options
    });
};

/**
 * Get the list of cpv (Common Procurement Vocabulary) codes
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const listCpvCodes = <ThrowOnError extends boolean = false>(options?: Options<ListCpvCodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCpvCodesResponses, ListCpvCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/cpv',
        ...options
    });
};

/**
 * find cpv (Common Procurement Vocabulary) codes by partial number or name
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const findCpvCodes = <ThrowOnError extends boolean = false>(options: Options<FindCpvCodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindCpvCodesResponses, FindCpvCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/cpv/search',
        ...options
    });
};

/**
 * Get the list of cpc (Central Product Classification) codes
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const listCpcCodes = <ThrowOnError extends boolean = false>(options?: Options<ListCpcCodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCpcCodesResponses, ListCpcCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v2/cpc',
        ...options
    });
};

/**
 * Get the list of bkp (Baukostenplan) codes
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const listBkpCodes = <ThrowOnError extends boolean = false>(options?: Options<ListBkpCodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListBkpCodesResponses, ListBkpCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/bkp',
        ...options
    });
};

/**
 * find bkp (Baukostenplan) codes by partial number or name
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const findBkpCodes = <ThrowOnError extends boolean = false>(options: Options<FindBkpCodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindBkpCodesResponses, FindBkpCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/bkp/search',
        ...options
    });
};

/**
 * Get the list of npk (Normpositionen-Katalog) codes
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const listNpkCodes = <ThrowOnError extends boolean = false>(options?: Options<ListNpkCodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListNpkCodesResponses, ListNpkCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/npk',
        ...options
    });
};

/**
 * find npk (Normpositionen-Katalog) codes by partial number or name
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const findNpkCodes = <ThrowOnError extends boolean = false>(options: Options<FindNpkCodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindNpkCodesResponses, FindNpkCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/npk/search',
        ...options
    });
};

/**
 * Get the list of ebkp-t (Elementbasierter Baukostenplan Tiefbau) codes
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const listEbkptCodes = <ThrowOnError extends boolean = false>(options?: Options<ListEbkptCodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListEbkptCodesResponses, ListEbkptCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/ebkp-t',
        ...options
    });
};

/**
 * find ebkp-t (Elementbasierter Baukostenplan Tiefbau) codes by partial number or name
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const findEbkptCodes = <ThrowOnError extends boolean = false>(options: Options<FindEbkptCodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindEbkptCodesResponses, FindEbkptCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/ebkp-t/search',
        ...options
    });
};

/**
 * Get the list of ebkp-h (Elementbasierter Baukostenplan Hochbau) codes
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const listEbkphCodes = <ThrowOnError extends boolean = false>(options?: Options<ListEbkphCodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListEbkphCodesResponses, ListEbkphCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/ebkp-h',
        ...options
    });
};

/**
 * find ebkp-h (Elementbasierter Baukostenplan Hochbau) codes by partial number or name
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const findEbkphCodes = <ThrowOnError extends boolean = false>(options: Options<FindEbkphCodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindEbkphCodesResponses, FindEbkphCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/ebkp-h/search',
        ...options
    });
};

/**
 * Get the list of oag (Objektarten-Gliederung) codes
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const listOagCodes = <ThrowOnError extends boolean = false>(options?: Options<ListOagCodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListOagCodesResponses, ListOagCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/oag',
        ...options
    });
};

/**
 * find oag ( Objektarten-Gliederung) codes by partial number or name
 * More details about the code can be found in the confluence [Nomenklaturen - Übersicht](https://projects.unic.com/x/6A1vBg)
 *
 */
export const findOagCodes = <ThrowOnError extends boolean = false>(options: Options<FindOagCodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindOagCodesResponses, FindOagCodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/codes/v1/oag/search',
        ...options
    });
};

/**
 * Get the list of institutions
 * This endpoint returns the tree for the selection / overview of the available institutions.
 * Navigate the tree with the usage of the `parentInstitutionId`, if not set will return the top level institutions.
 *
 */
export const listInstitutions = <ThrowOnError extends boolean = false>(options?: Options<ListInstitutionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListInstitutionsResponses, ListInstitutionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/institutions/v1',
        ...options
    });
};

/**
 * Get details for single institution
 */
export const getInstitutionById = <ThrowOnError extends boolean = false>(options: Options<GetInstitutionByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInstitutionByIdResponses, GetInstitutionByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/institutions/v1/institution/{institutionId}',
        ...options
    });
};

/**
 * find procurement offices by name in the institution tree
 * The search will return the found procurement offices as the tree representation, as they would be, if one traversed the institutions tree.
 * ```
 * Possible return result structure:
 * - institution
 * - institution
 * * PO
 * - institution
 * * PO
 * * PO
 * - institution
 * * PO
 * - institution
 * - institution
 * - institution
 * * PO
 * ```
 *
 */
export const findPoInInstitutionTree = <ThrowOnError extends boolean = false>(options: Options<FindPoInInstitutionTreeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindPoInInstitutionTreeResponses, FindPoInInstitutionTreeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/institutions/v1/po/search',
        ...options
    });
};

/**
 * Search for users by first name, last name or email
 * Rolling pagination:
 * To fetch the next page add the lastItem to the query, the last item can be found in the first result.
 * For the user-search the item represents the email-address, as the results are ordered by it and it's the primary identification.
 * If no more results are available the api returns an empty list or one with fewer items than the specified itemsPerPage.
 *
 */
export const searchUsers = <ThrowOnError extends boolean = false>(options: Options<SearchUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchUsersResponses, SearchUsersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1',
        ...options
    });
};

/**
 * Retrieve all users according to your permission
 * chunked json of `UserRoleExport`, separated by line.
 *
 */
export const exportAllUsers = <ThrowOnError extends boolean = false>(options?: Options<ExportAllUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ExportAllUsersResponses, ExportAllUsersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/all',
        ...options
    });
};

/**
 * Get details for single user
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/user/{userId}',
        ...options
    });
};

/**
 * Delete the current user
 */
export const deleteMyUser = <ThrowOnError extends boolean = false>(options?: Options<DeleteMyUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteMyUserResponses, DeleteMyUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/my',
        ...options
    });
};

/**
 * Get the current user
 */
export const getMyUser = <ThrowOnError extends boolean = false>(options?: Options<GetMyUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyUserResponses, GetMyUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/my',
        ...options
    });
};

/**
 * Changes the current user.
 */
export const editMyUser = <ThrowOnError extends boolean = false>(options: Options<EditMyUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditMyUserResponses, EditMyUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/my',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * A simap admin can impersonate a specific user for customer service purposes.
 */
export const impersonateUser = <ThrowOnError extends boolean = false>(options: Options<ImpersonateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImpersonateUserResponses, ImpersonateUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/user/{impersonatedUserId}/impersonate',
        ...options
    });
};

/**
 * Refresh the impersonated user's token
 */
export const refreshTokenImpersonatedUser = <ThrowOnError extends boolean = false>(options: Options<RefreshTokenImpersonatedUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RefreshTokenImpersonatedUserResponses, RefreshTokenImpersonatedUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/user/{impersonatedUserId}/impersonate/refresh-token',
        ...options
    });
};

/**
 * Search for users by givenname, lastname, email or organization
 * Rolling pagination:
 * To fetch the next page add the lastItem to the query, the last item can be found in the first result.
 * For the user-search the item represents the email-address, as the results are ordered by it and it's the primary identification.
 * If no more results are available the api returns an empty list or one with fewer items than the specified itemsPerPage.
 *
 */
export const searchUsersWithOrgAndRole = <ThrowOnError extends boolean = false>(options: Options<SearchUsersWithOrgAndRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchUsersWithOrgAndRoleResponses, SearchUsersWithOrgAndRoleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/search-with-org-and-role',
        ...options
    });
};

/**
 * Get organization memberships of a user
 */
export const getMyOrganizationMemberships = <ThrowOnError extends boolean = false>(options?: Options<GetMyOrganizationMembershipsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyOrganizationMembershipsResponses, GetMyOrganizationMembershipsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/my/organizations',
        ...options
    });
};

/**
 * Delete own request to join an organization or delete own membership (leave organization)
 */
export const deleteMyOrganizationMembership = <ThrowOnError extends boolean = false>(options: Options<DeleteMyOrganizationMembershipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMyOrganizationMembershipResponses, DeleteMyOrganizationMembershipErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/my/organizations/{organizationId}',
        ...options
    });
};

/**
 * Get the list of competence centres
 */
export const getCompCentres = <ThrowOnError extends boolean = false>(options?: Options<GetCompCentresData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCompCentresResponses, GetCompCentresErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1',
        ...options
    });
};

/**
 * Search procurement offices that are part of an institution below the current comp-centre sorted by name.
 * Rolling pagination:
 * To fetch the next page add the lastItem to the query. The last item can be found in the pagination-information
 * of the first result and represents the name of the ProcOffice.
 *
 */
export const findProcOfficesOfMyCompCentre = <ThrowOnError extends boolean = false>(options?: Options<FindProcOfficesOfMyCompCentreData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FindProcOfficesOfMyCompCentreResponses, FindProcOfficesOfMyCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/procoffices',
        ...options
    });
};

/**
 * Get details for single competence centre
 */
export const getCompCentre = <ThrowOnError extends boolean = false>(options: Options<GetCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCompCentreResponses, GetCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/cc/{compCentreId}',
        ...options
    });
};

/**
 * Add or update information of a CompetenceCentre
 */
export const updateCompCentre = <ThrowOnError extends boolean = false>(options: Options<UpdateCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateCompCentreResponses, UpdateCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/cc/{compCentreId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * add a new member to the competence centre
 */
export const addCompCentreMember = <ThrowOnError extends boolean = false>(options: Options<AddCompCentreMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AddCompCentreMemberResponses, AddCompCentreMemberErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/cc/{compCentreId}/addmember',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * A competence centre admin can remove an accepted member from the competence centre. Accepted users get notified about their removal.
 */
export const removeCompCentreMember = <ThrowOnError extends boolean = false>(options: Options<RemoveCompCentreMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveCompCentreMemberResponses, RemoveCompCentreMemberErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/cc/{compCentreId}/members/{userId}',
        ...options
    });
};

/**
 * Get the list of competence centre members (admins and print-users) of the current competence centre.
 */
export const getCompCentreMembers = <ThrowOnError extends boolean = false>(options?: Options<GetCompCentreMembersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCompCentreMembersResponses, GetCompCentreMembersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/members',
        ...options
    });
};

/**
 * Search users attached to competence centre through procurement office or direct competence centre users
 * Rolling pagination:
 * To fetch the next page add the lastItem to the query, the last item can be found in the first result.
 * For the user-search the item represents the email-address, as the results are ordered by it and it's the primary identification.
 *
 */
export const searchAttachedUsers = <ThrowOnError extends boolean = false>(options: Options<SearchAttachedUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchAttachedUsersResponses, SearchAttachedUsersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/procoffices/users/search',
        ...options
    });
};

/**
 * Get or search list of remedies notice templates
 * Rolling pagination:
 * To fetch the next page add the lastItem to the query, the last item can be found in the first result.
 *
 */
export const searchRemediesNoticeTemplatesByCompCentre = <ThrowOnError extends boolean = false>(options?: Options<SearchRemediesNoticeTemplatesByCompCentreData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SearchRemediesNoticeTemplatesByCompCentreResponses, SearchRemediesNoticeTemplatesByCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/remedies-notices',
        ...options
    });
};

/**
 * Delete a remedies notice template
 */
export const deleteRemediesNoticeTemplateInCompCentre = <ThrowOnError extends boolean = false>(options: Options<DeleteRemediesNoticeTemplateInCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRemediesNoticeTemplateInCompCentreResponses, DeleteRemediesNoticeTemplateInCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/remedies-notices/{remediesNoticeTemplateId}',
        ...options
    });
};

/**
 * Get a single remedies notice template
 */
export const getRemediesNoticeTemplateByCompCentre = <ThrowOnError extends boolean = false>(options: Options<GetRemediesNoticeTemplateByCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRemediesNoticeTemplateByCompCentreResponses, GetRemediesNoticeTemplateByCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/remedies-notices/{remediesNoticeTemplateId}',
        ...options
    });
};

/**
 * Update a remedies notice template
 */
export const updateRemediesNoticeTemplateForCompCentre = <ThrowOnError extends boolean = false>(options: Options<UpdateRemediesNoticeTemplateForCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateRemediesNoticeTemplateForCompCentreResponses, UpdateRemediesNoticeTemplateForCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/remedies-notices/{remediesNoticeTemplateId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a remedies notice template
 */
export const createRemediesNoticeTemplateForCompCentre = <ThrowOnError extends boolean = false>(options: Options<CreateRemediesNoticeTemplateForCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateRemediesNoticeTemplateForCompCentreResponses, CreateRemediesNoticeTemplateForCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/remedies-notices/{remediesNoticeTemplateId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of pub-draft templates within the users current comp-centre
 * Rolling pagination:
 * To fetch the next page add the lastItem to the query, the last item can be found in the first result.
 *
 */
export const searchPubDraftTemplatesByCompCentre = <ThrowOnError extends boolean = false>(options?: Options<SearchPubDraftTemplatesByCompCentreData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SearchPubDraftTemplatesByCompCentreResponses, SearchPubDraftTemplatesByCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/pub-draft-templates',
        ...options
    });
};

/**
 * Delete a contact of a competence centre
 */
export const deleteContactInCompCentre = <ThrowOnError extends boolean = false>(options: Options<DeleteContactInCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteContactInCompCentreResponses, DeleteContactInCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/contacts/{contactId}',
        ...options
    });
};

/**
 * Update a contact of a competence centre
 */
export const updateContactForCompCentre = <ThrowOnError extends boolean = false>(options: Options<UpdateContactForCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateContactForCompCentreResponses, UpdateContactForCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/contacts/{contactId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a contact for a competence centre
 */
export const createContactForCompCentre = <ThrowOnError extends boolean = false>(options: Options<CreateContactForCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateContactForCompCentreResponses, CreateContactForCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/contacts/{contactId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a url of a competence centre
 */
export const deleteUrlInCompCentre = <ThrowOnError extends boolean = false>(options: Options<DeleteUrlInCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUrlInCompCentreResponses, DeleteUrlInCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/urls/{urlId}',
        ...options
    });
};

/**
 * Update a url of a competence centre
 */
export const updateUrlForCompCentre = <ThrowOnError extends boolean = false>(options: Options<UpdateUrlForCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUrlForCompCentreResponses, UpdateUrlForCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/urls/{urlId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a url for a competence centre
 */
export const createUrlForCompCentre = <ThrowOnError extends boolean = false>(options: Options<CreateUrlForCompCentreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateUrlForCompCentreResponses, CreateUrlForCompCentreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/urls/{urlId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reorder the urls of a competence centre
 * expects an ordered list of urls and will update the positions of the urls according to the ordering in the list.
 *
 */
export const reorderCompCentreUrls = <ThrowOnError extends boolean = false>(options: Options<ReorderCompCentreUrlsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ReorderCompCentreUrlsResponses, ReorderCompCentreUrlsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/urls/{compCentreId}/order',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of pub drafts to publish
 * List all pub drafts in state 'to_publish' which are assigned to the competence centre of the
 * logged in user where the editorial deadline has passed but not the publication date at the date and time of the request.
 * This list can be used by a 'competence centre print user' (or the competence centre admin) to get all pub drafts needed
 * to publish in the assigned publishing organ(s) like 'Amtsblatt'.
 *
 */
export const listPubDraftsOfCompCentreToPublish = <ThrowOnError extends boolean = false>(options?: Options<ListPubDraftsOfCompCentreToPublishData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPubDraftsOfCompCentreToPublishResponses, ListPubDraftsOfCompCentreToPublishErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/publications/to-publish',
        ...options
    });
};

/**
 * Delete regular publication date for the publisher which is assigned to my competence centre.
 * In case the publisher is shared amongst multiple competence centres this will also affect the
 * other competence centres.
 *
 */
export const deletePublicationDateRule = <ThrowOnError extends boolean = false>(options: Options<DeletePublicationDateRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePublicationDateRuleResponses, DeletePublicationDateRuleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/publisher/publication-dates/{publicationDateId}',
        ...options
    });
};

/**
 * Create a new regular publication date for the publisher which is assigned to my competence centre.
 * In case the publisher is shared amongst multiple competence centres this will also affect the
 * other competence centres.
 *
 */
export const createPublicationDateRule = <ThrowOnError extends boolean = false>(options: Options<CreatePublicationDateRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreatePublicationDateRuleResponses, CreatePublicationDateRuleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/publisher/publication-dates/{publicationDateId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a publication date exception for the publisher which is assigned to my competence centre
 * In case the publisher is shared amongst multiple competence centres this will also affect the
 * other competence centres.
 *
 */
export const deletePublicationDateException = <ThrowOnError extends boolean = false>(options: Options<DeletePublicationDateExceptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePublicationDateExceptionResponses, DeletePublicationDateExceptionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/publisher/publication-dates/exceptions/{publicationDateExceptionId}',
        ...options
    });
};

/**
 * Create a publication date exception for the publisher which is assigned to my competence centre
 * In case the publisher is shared amongst multiple competence centres this will also affect the
 * other competence centres.
 *
 */
export const createPublicationDateException = <ThrowOnError extends boolean = false>(options: Options<CreatePublicationDateExceptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreatePublicationDateExceptionResponses, CreatePublicationDateExceptionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compcentres/v1/my/publisher/publication-dates/exceptions/{publicationDateExceptionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Search procurement offices
 * Rolling pagination:
 * To fetch the next page add the lastItem to the query. The last item can be found in the pagination-information
 * of the first result and represents the name of the ProcOffice.
 *
 */
export const searchProcOffices = <ThrowOnError extends boolean = false>(options?: Options<SearchProcOfficesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SearchProcOfficesResponses, SearchProcOfficesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po',
        ...options
    });
};

/**
 * Get procurement offices for an institution
 */
export const getProcOfficeTreeView = <ThrowOnError extends boolean = false>(options: Options<GetProcOfficeTreeViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcOfficeTreeViewResponses, GetProcOfficeTreeViewErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/treeview',
        ...options
    });
};

/**
 * get my current procurement office
 */
export const getMyProcOffice = <ThrowOnError extends boolean = false>(options?: Options<GetMyProcOfficeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyProcOfficeResponses, GetMyProcOfficeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my',
        ...options
    });
};

/**
 * Get procurement office
 */
export const getProcOffice = <ThrowOnError extends boolean = false>(options: Options<GetProcOfficeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcOfficeResponses, GetProcOfficeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po/{procOfficeId}',
        ...options
    });
};

/**
 * Update a procurement office
 */
export const updateProcOffice = <ThrowOnError extends boolean = false>(options: Options<UpdateProcOfficeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateProcOfficeResponses, UpdateProcOfficeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po/{procOfficeId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a procurement office
 */
export const createProcOffice = <ThrowOnError extends boolean = false>(options: Options<CreateProcOfficeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateProcOfficeResponses, CreateProcOfficeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po/{procOfficeId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Accept a request from a new procurement office to join an organization. This will update the state of the procurement office to 'confirmed'
 */
export const acceptRequestToJoinOrganization = <ThrowOnError extends boolean = false>(options: Options<AcceptRequestToJoinOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AcceptRequestToJoinOrganizationResponses, AcceptRequestToJoinOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po/{procOfficeId}/accept',
        ...options
    });
};

/**
 * Reject a request from a new procurement office to join an organization. This will delete the procurement office resource.
 */
export const rejectRequestToJoinOrganization = <ThrowOnError extends boolean = false>(options: Options<RejectRequestToJoinOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RejectRequestToJoinOrganizationResponses, RejectRequestToJoinOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po/{procOfficeId}/reject',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send request to join a proc-office for current user
 */
export const requestToJoinProcOffice = <ThrowOnError extends boolean = false>(options: Options<RequestToJoinProcOfficeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RequestToJoinProcOfficeResponses, RequestToJoinProcOfficeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po/{procOfficeId}/join',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of members and the current requests to join the procurement office
 */
export const listMembers = <ThrowOnError extends boolean = false>(options: Options<ListMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMembersResponses, ListMembersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po/{procOfficeId}/members',
        ...options
    });
};

/**
 * Respond with accept or reject to request for joining procurement office
 */
export const respondToRequest = <ThrowOnError extends boolean = false>(options: Options<RespondToRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RespondToRequestResponses, RespondToRequestErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po/{procOfficeId}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * The procurement office can remove an accepted member or a rejected request. Accepted members get notified about their removal.
 */
export const removeProcOfficeMember = <ThrowOnError extends boolean = false>(options: Options<RemoveProcOfficeMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveProcOfficeMemberResponses, RemoveProcOfficeMemberErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po/{procOfficeId}/members/{userId}',
        ...options
    });
};

/**
 * The procurement office can get the member details
 */
export const getMemberById = <ThrowOnError extends boolean = false>(options: Options<GetMemberByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMemberByIdResponses, GetMemberByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po/{procOfficeId}/members/{userId}',
        ...options
    });
};

/**
 * Update roles of procurement office members
 * Will update the roles of the given procurement members.
 * Will return the updated members.
 *
 */
export const updateProcurementMembersRoles = <ThrowOnError extends boolean = false>(options: Options<UpdateProcurementMembersRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProcurementMembersRolesResponses, UpdateProcurementMembersRolesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/po/{procOfficeId}/members/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * project overview for the current proc-office
 * Returns all projects in draft, published and archived status.
 *
 */
export const getProcurementProjectOverview = <ThrowOnError extends boolean = false>(options: Options<GetProcurementProjectOverviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcurementProjectOverviewResponses, GetProcurementProjectOverviewErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v2/my/projects/projects-overview',
        ...options
    });
};

/**
 * Get general header information of a project by id
 */
export const getProjectHeaderById = <ThrowOnError extends boolean = false>(options: Options<GetProjectHeaderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectHeaderByIdResponses, GetProjectHeaderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/project-header',
        ...options
    });
};

/**
 * get project specific procurement user notification settings
 */
export const getProcOfficeUserNotificationSettings = <ThrowOnError extends boolean = false>(options: Options<GetProcOfficeUserNotificationSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcOfficeUserNotificationSettingsResponses, GetProcOfficeUserNotificationSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/my-notification-settings',
        ...options
    });
};

/**
 * Create or update project specific procurement user notification settings
 */
export const updateProcOfficeUserNotificationSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateProcOfficeUserNotificationSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProcOfficeUserNotificationSettingsResponses, UpdateProcOfficeUserNotificationSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/my-notification-settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * mark or unmark a project as archived
 */
export const archiveProcOfficeProject = <ThrowOnError extends boolean = false>(options: Options<ArchiveProcOfficeProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ArchiveProcOfficeProjectResponses, ArchiveProcOfficeProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/archive',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of remedies notice templates
 * Rolling pagination:
 * To fetch the next page add the lastItem to the query, the last item can be found in the first result.
 *
 */
export const searchRemediesNoticeTemplatesByProcOffice = <ThrowOnError extends boolean = false>(options?: Options<SearchRemediesNoticeTemplatesByProcOfficeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SearchRemediesNoticeTemplatesByProcOfficeResponses, SearchRemediesNoticeTemplatesByProcOfficeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/remedies-notices',
        ...options
    });
};

/**
 * Get a single remedies notice template
 */
export const getRemediesNoticeTemplateByProcOffice = <ThrowOnError extends boolean = false>(options: Options<GetRemediesNoticeTemplateByProcOfficeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRemediesNoticeTemplateByProcOfficeResponses, GetRemediesNoticeTemplateByProcOfficeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/remedies-notices/{remediesNoticeTemplateId}',
        ...options
    });
};

/**
 * Get the list of pub-draft templates within the users current proc-office or comp-centre
 * Rolling pagination:
 * To fetch the next page add the lastItem to the query, the last item can be found in the first result.
 *
 */
export const searchPubDraftTemplatesByProcOffice = <ThrowOnError extends boolean = false>(options: Options<SearchPubDraftTemplatesByProcOfficeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchPubDraftTemplatesByProcOfficeResponses, SearchPubDraftTemplatesByProcOfficeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/pub-draft-templates',
        ...options
    });
};

/**
 * Get involved vendors for a project
 */
export const getVendorsInvolvedInProject = <ThrowOnError extends boolean = false>(options: Options<GetVendorsInvolvedInProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVendorsInvolvedInProjectResponses, GetVendorsInvolvedInProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v2/my/projects/{projectId}/involved-vendors',
        ...options
    });
};

/**
 * Add a vendor to the list of involved vendors for the given project and define that the vendor showed interest
 * This endpoint is not supported for project with process-type `invitation`;
 * For invitation use dedicated endpoint `/procoffices/v1/my/projects/{projectId}/involved-vendors/{vendorId}/invite`
 *
 * Setting 'interest-shown' for a vendor via this endpoint allows the vendor to access the project documents and qnas.
 * It also gives a proc-office member the possibility to execute follow up actions as i.e. mark external submission.
 *
 */
export const involveVendorInProject = <ThrowOnError extends boolean = false>(options: Options<InvolveVendorInProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<InvolveVendorInProjectResponses, InvolveVendorInProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v2/my/projects/{projectId}/involved-vendors/{vendorId}',
        ...options
    });
};

/**
 * Add a vendor to the list of involved vendors for the given project and define that the vendor is invited
 * This endpoint is only supported for projects with process-type `invitation`;
 * For any other process-types use dedicated endpoint `/procoffices/v1/my/projects/{projectId}/involved-vendors/{vendorId}`
 *
 * Setting 'invited' for a vendor via this endpoint grants them access to view the project and all publications in it,
 * including publications which would otherwise remain hidden since they have not been published publicly.
 *
 * Setting 'invitation_declined' is only possible through the invited vendor.
 *
 */
export const inviteVendorToProject = <ThrowOnError extends boolean = false>(options: Options<InviteVendorToProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<InviteVendorToProjectResponses, InviteVendorToProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v2/my/projects/{projectId}/involved-vendors/{vendorId}/invite',
        ...options
    });
};

/**
 * Register that a given vendor handed in offer documents externally for a given project.
 */
export const markOfferExternalSubmissionForVendor = <ThrowOnError extends boolean = false>(options: Options<MarkOfferExternalSubmissionForVendorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarkOfferExternalSubmissionForVendorResponses, MarkOfferExternalSubmissionForVendorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/involved-vendors/{vendorId}/offer-external-submission',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register that a given vendor handed in participation documents externally for a given project with a publication applying a selective process
 */
export const markParticipationExternalSubmissionForVendor = <ThrowOnError extends boolean = false>(options: Options<MarkParticipationExternalSubmissionForVendorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarkParticipationExternalSubmissionForVendorResponses, MarkParticipationExternalSubmissionForVendorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/involved-vendors/{vendorId}/participation-external-submission',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register that a given vendor handed in documents externally for a given rfi project.
 */
export const markRequestForInformationExternalSubmissionForVendor = <ThrowOnError extends boolean = false>(options: Options<MarkRequestForInformationExternalSubmissionForVendorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarkRequestForInformationExternalSubmissionForVendorResponses, MarkRequestForInformationExternalSubmissionForVendorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/involved-vendors/{vendorId}/rfi-external-submission',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * send the message
 */
export const sendMessageToInvolvedVendors = <ThrowOnError extends boolean = false>(options: Options<SendMessageToInvolvedVendorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendMessageToInvolvedVendorsResponses, SendMessageToInvolvedVendorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/involved-vendors-messages/{messageId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Provide overview for all qna-rounds with the attached qna-Pairs within a project.
 */
export const getQnaRounds = <ThrowOnError extends boolean = false>(options: Options<GetQnaRoundsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetQnaRoundsResponses, GetQnaRoundsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/qnas',
        ...options
    });
};

/**
 * Get all the necessary data for the participation protocol
 */
export const getParticipationProtocol = <ThrowOnError extends boolean = false>(options: Options<GetParticipationProtocolData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetParticipationProtocolResponses, GetParticipationProtocolErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v2/my/projects/{projectId}/participation-protocol',
        ...options
    });
};

/**
 * Get all the necessary data for the offer protocol
 */
export const getOfferProtocol = <ThrowOnError extends boolean = false>(options: Options<GetOfferProtocolData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOfferProtocolResponses, GetOfferProtocolErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v2/my/projects/{projectId}/offer-protocol',
        ...options
    });
};

/**
 * Get the list of documents assigned to a project filtered by provided query parameters
 */
export const searchProjectDocuments = <ThrowOnError extends boolean = false>(options: Options<SearchProjectDocumentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchProjectDocumentsResponses, SearchProjectDocumentsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/documents',
        ...options
    });
};

/**
 * Get a Download Token to fetch a zip file containing all project document files
 */
export const getProjectDocumentsZipToken = <ThrowOnError extends boolean = false>(options: Options<GetProjectDocumentsZipTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectDocumentsZipTokenResponses, GetProjectDocumentsZipTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/documents/zip-token',
        ...options
    });
};

/**
 * delete a project document
 * Delete the uploaded document and the project document in case the pub-draft is not yet
 * published. Otherwise mark the project document as deleted and delete the file only.
 *
 */
export const deleteProjectDocument = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectDocumentResponses, DeleteProjectDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/documents/{projectDocumentId}',
        ...options
    });
};

/**
 * Update metadata of a project document
 */
export const updateProjectDocumentMetadata = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectDocumentMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateProjectDocumentMetadataResponses, UpdateProjectDocumentMetadataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/documents/{projectDocumentId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload a document to a project
 */
export const uploadProjectDocument = <ThrowOnError extends boolean = false>(options: Options<UploadProjectDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadProjectDocumentResponses, UploadProjectDocumentErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/documents/{projectDocumentId}/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get the list of contributors in the project
 */
export const listProjectContributors = <ThrowOnError extends boolean = false>(options: Options<ListProjectContributorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectContributorsResponses, ListProjectContributorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/contributors',
        ...options
    });
};

/**
 * Remove contributor from project
 */
export const removeProjectContributor = <ThrowOnError extends boolean = false>(options: Options<RemoveProjectContributorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveProjectContributorResponses, RemoveProjectContributorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/contributors/{userId}',
        ...options
    });
};

/**
 * Add contributor to project
 */
export const addProjectContributor = <ThrowOnError extends boolean = false>(options: Options<AddProjectContributorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AddProjectContributorResponses, AddProjectContributorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/contributors/{userId}',
        ...options
    });
};

/**
 * Patch the internal reference of a project
 * Update the internal reference of the given project.
 *
 */
export const patchInternalReference = <ThrowOnError extends boolean = false>(options: Options<PatchInternalReferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchInternalReferenceResponses, PatchInternalReferenceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/internal-reference',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the digital submissions for a project
 * Get the digital submissions for a project, lotId needs to be provided as query parameter if project was created with lotsType 'with'.
 */
export const getProcOfficeVendorDigitalSubmissions = <ThrowOnError extends boolean = false>(options: Options<GetProcOfficeVendorDigitalSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcOfficeVendorDigitalSubmissionsResponses, GetProcOfficeVendorDigitalSubmissionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/involved-vendors/{vendorId}/digital-submissions',
        ...options
    });
};

/**
 * Open a vendor digital submission
 */
export const openVendorDigitalSubmissions = <ThrowOnError extends boolean = false>(options: Options<OpenVendorDigitalSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenVendorDigitalSubmissionsResponses, OpenVendorDigitalSubmissionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/procoffices/v1/my/projects/{projectId}/involved-vendors/{vendorId}/digital-submissions/{vendorDigitalSubmissionId}/open',
        ...options
    });
};

/**
 * Find registered vendors by name, UID or DUNS
 */
export const findVendors = <ThrowOnError extends boolean = false>(options: Options<FindVendorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindVendorsResponses, FindVendorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1',
        ...options
    });
};

/**
 * Delete the vendor profile
 * The vendor admin can delete his vendor organization but only if nobody showed interest in any project.
 * All member relations to this vendor (users and admins) are deleted but not the user itself.
 *
 */
export const deleteVendor = <ThrowOnError extends boolean = false>(options: Options<DeleteVendorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVendorResponses, DeleteVendorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/vendor/{vendorId}',
        ...options
    });
};

/**
 * Get information for specific vendor
 */
export const getVendor = <ThrowOnError extends boolean = false>(options: Options<GetVendorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVendorResponses, GetVendorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/vendor/{vendorId}',
        ...options
    });
};

/**
 * Update a vendor profile
 * Update a vendors profile. UID- or DUNS number can only be updated once. The update
 * does not synchronize the values with the register, those values need to be fetched before
 * using the `verify-uid` or `verify-duns` endpoints.
 *
 */
export const updateVendor = <ThrowOnError extends boolean = false>(options: Options<UpdateVendorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateVendorResponses, UpdateVendorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/vendor/{vendorId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a vendor profile
 */
export const createVendor = <ThrowOnError extends boolean = false>(options: Options<CreateVendorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateVendorResponses, CreateVendorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/vendor/{vendorId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get public information for specific vendor
 */
export const getVendorPublic = <ThrowOnError extends boolean = false>(options: Options<GetVendorPublicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVendorPublicResponses, GetVendorPublicErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/vendor/{vendorId}/public',
        ...options
    });
};

/**
 * Verify an UID
 * returns either:
 * * an existing vendor (different id than provided in body)
 * * a new prefilled vendor-profile (same id as provided in body)
 * * error 404 if nothing was found, or 400 when a malformed UID was provided
 *
 */
export const verifyVendorUid = <ThrowOnError extends boolean = false>(options: Options<VerifyVendorUidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyVendorUidResponses, VerifyVendorUidErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/verify-uid',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify a DUNS number
 * returns either:
 * * an existing vendor (different id than provided in body)
 * * a new prefilled vendor-profile (same id as provided in body)
 * * error 404 if nothing was found, or 400 when a malformed DUNS was provided
 *
 */
export const verifyVendorDuns = <ThrowOnError extends boolean = false>(options: Options<VerifyVendorDunsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyVendorDunsResponses, VerifyVendorDunsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/verify-duns',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the active vendor of the current user
 */
export const getMyVendor = <ThrowOnError extends boolean = false>(options?: Options<GetMyVendorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyVendorResponses, GetMyVendorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my',
        ...options
    });
};

/**
 * Send request to join a vendor for current user
 */
export const requestToJoinVendor = <ThrowOnError extends boolean = false>(options: Options<RequestToJoinVendorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RequestToJoinVendorResponses, RequestToJoinVendorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/vendor/{vendorId}/join',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of members including their current member status for the given vendor.
 * In case of vendor_user, vendor_admin only members of the own vendor can be queried.
 *
 * Use /vendors/v1/vendor/{vendorId}/public to query the public information of a vendor.
 *
 */
export const listVendorMembers = <ThrowOnError extends boolean = false>(options: Options<ListVendorMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListVendorMembersResponses, ListVendorMembersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/vendor/{vendorId}/members',
        ...options
    });
};

/**
 * Respond with accept, reject or revoke to request for joining vendor
 */
export const respondToVendorJoinRequest = <ThrowOnError extends boolean = false>(options: Options<RespondToVendorJoinRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RespondToVendorJoinRequestResponses, RespondToVendorJoinRequestErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/vendor/{vendorId}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * The vendor can remove an accepted member or reject a join-request. Accepted members get notified about their removal.
 */
export const removeVendorMember = <ThrowOnError extends boolean = false>(options: Options<RemoveVendorMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveVendorMemberResponses, RemoveVendorMemberErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/vendor/{vendorId}/members/{userId}',
        ...options
    });
};

/**
 * Update public vendor admins
 * This endpoint is used to change the visibility of admins and to update their `organizationUnit`.
 * The given vendor admins will be made public and the `organizationUnit` is updated, missing public admins will be
 * made private.
 *
 * The request requires one valid vendor admin and will return the public admin members.
 * There must be always one public vendor admin.
 *
 * Get the current members of a vendor with `GET /vendors/v1/vendor/{vendorId}/members`
 *
 */
export const updatePublicVendorMembers = <ThrowOnError extends boolean = false>(options: Options<UpdatePublicVendorMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePublicVendorMembersResponses, UpdatePublicVendorMembersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/vendor/{vendorId}/members/public',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update roles of vendor members
 * Will update the roles of vendor members.
 * Will return all members.
 * Get the current members of a vendor with `GET /vendors/v1/vendor/{vendorId}/members`
 *
 */
export const updateVendorMembersRoles = <ThrowOnError extends boolean = false>(options: Options<UpdateVendorMembersRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateVendorMembersRolesResponses, UpdateVendorMembersRolesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/vendor/{vendorId}/members/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Simap Admin endpoint to find registered vendors by name, UID or DUNS
 * This endpoint is for the `simap_admin` to search for a vendor over all vendors, active or not.
 *
 */
export const simapAdminFindVendors = <ThrowOnError extends boolean = false>(options: Options<SimapAdminFindVendorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SimapAdminFindVendorsResponses, SimapAdminFindVendorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/simap-admin/vendors',
        ...options
    });
};

/**
 * vendor project overview
 * Returns all projects the vendor showed interest and which meet the search input and filters.
 *
 */
export const getVendorProjectOverview = <ThrowOnError extends boolean = false>(options: Options<GetVendorProjectOverviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVendorProjectOverviewResponses, GetVendorProjectOverviewErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v2/my/projects/projects-overview',
        ...options
    });
};

/**
 * Provide overview for all qna-rounds with the attached qna-Pairs within a project for vendors with interest.
 */
export const getQnaRoundsForProject = <ThrowOnError extends boolean = false>(options: Options<GetQnaRoundsForProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetQnaRoundsForProjectResponses, GetQnaRoundsForProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/projects/{projectId}/qnas',
        ...options
    });
};

/**
 * Get the list of project documents assigned to this project filtered by query parameters
 */
export const searchDocumentsForProject = <ThrowOnError extends boolean = false>(options: Options<SearchDocumentsForProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchDocumentsForProjectResponses, SearchDocumentsForProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/projects/{projectId}/documents',
        ...options
    });
};

/**
 * Get a download token to fetch a zip file containing all project documents for the given project and lot.
 */
export const getVendorProjectsDocumentsZipToken = <ThrowOnError extends boolean = false>(options: Options<GetVendorProjectsDocumentsZipTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVendorProjectsDocumentsZipTokenResponses, GetVendorProjectsDocumentsZipTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/projects/{projectId}/documents/zip-token',
        ...options
    });
};

/**
 * get project specific vendor user notification settings
 */
export const getVendorUserNotificationSettings = <ThrowOnError extends boolean = false>(options: Options<GetVendorUserNotificationSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVendorUserNotificationSettingsResponses, GetVendorUserNotificationSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/projects/{projectId}/my-notification-settings',
        ...options
    });
};

/**
 * Create or update project specific vendor user notification settings
 */
export const updateVendorUserNotificationSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateVendorUserNotificationSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateVendorUserNotificationSettingsResponses, UpdateVendorUserNotificationSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/projects/{projectId}/my-notification-settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * mark or unmark a project as archived
 */
export const archiveVendorProject = <ThrowOnError extends boolean = false>(options: Options<ArchiveVendorProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ArchiveVendorProjectResponses, ArchiveVendorProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/projects/{projectId}/archive',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of vendor documents
 */
export const listVendorDocuments = <ThrowOnError extends boolean = false>(options?: Options<ListVendorDocumentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListVendorDocumentsResponses, ListVendorDocumentsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/documents',
        ...options
    });
};

/**
 * delete a vendor document
 * Delete the uploaded vendor document.
 *
 */
export const deleteVendorDocument = <ThrowOnError extends boolean = false>(options: Options<DeleteVendorDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVendorDocumentResponses, DeleteVendorDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/documents/{vendorDocumentId}',
        ...options
    });
};

/**
 * Download a vendor document by id, authenticate via token in query parameter -- token can be obtained by:
 * /vendors/v1/vendor/{vendorId}/documents/{vendorDocumentId}/token
 *
 */
export const downloadVendorDocument = <ThrowOnError extends boolean = false>(options: Options<DownloadVendorDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadVendorDocumentResponses, DownloadVendorDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/documents/{vendorDocumentId}',
        ...options
    });
};

/**
 * Get a Download Token to fetch vendor document files
 */
export const getVendorDocumentDownloadToken = <ThrowOnError extends boolean = false>(options: Options<GetVendorDocumentDownloadTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVendorDocumentDownloadTokenResponses, GetVendorDocumentDownloadTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/documents/{vendorDocumentId}/token',
        ...options
    });
};

/**
 * Upload a vendor document
 */
export const uploadVendorDocument = <ThrowOnError extends boolean = false>(options: Options<UploadVendorDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadVendorDocumentResponses, UploadVendorDocumentErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/documents/{vendorDocumentId}/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Show or withdraw interest in a project for the vendor the logged in user belongs to.
 */
export const updateInterestInProject = <ThrowOnError extends boolean = false>(options: Options<UpdateInterestInProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateInterestInProjectResponses, UpdateInterestInProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/publications/v1/project/{projectId}/interest',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Decline project invitation for the vendor the logged in user belongs to.
 * The vendor must first be invited by the procurement office to have the option to decline.
 * Decline an invitation is used only for project with processType 'invitation'; otherwise the interest-status should be used.
 * See `/publications/v1/project/{projectId}/interest`
 *
 */
export const declineInvitationToProject = <ThrowOnError extends boolean = false>(options: Options<DeclineInvitationToProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeclineInvitationToProjectResponses, DeclineInvitationToProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/publications/v1/project/{projectId}/decline-invitation',
        ...options
    });
};

/**
 * public project search
 * Returns all public projects meeting the search input and filters
 * Note that you need to specify at least the search input or one of the quick filters,
 * i.e. a search query without search input nor quick-filter is not allowed
 *
 * Rolling pagination:
 * To fetch the next page add the lastItem to the query. The last item can be found in the pagination-information
 * of the first result and is a combination of newest publication date and project-number in the format
 * <date>|<projectNumber>
 *
 */
export const getPublicProjectSearch = <ThrowOnError extends boolean = false>(options?: Options<GetPublicProjectSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPublicProjectSearchResponses, GetPublicProjectSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/publications/v2/project/project-search',
        ...options
    });
};

/**
 * Get publication detail
 */
export const getPublicationDetail = <ThrowOnError extends boolean = false>(options: Options<GetPublicationDetailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPublicationDetailResponses, GetPublicationDetailErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/publications/v1/project/{projectId}/publication-details/{publicationId}',
        ...options
    });
};

/**
 * Get general header information of a project by id
 */
export const getPublicProjectHeaderById = <ThrowOnError extends boolean = false>(options: Options<GetPublicProjectHeaderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPublicProjectHeaderByIdResponses, GetPublicProjectHeaderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/publications/v2/project/{projectId}/project-header',
        ...options
    });
};

/**
 * Get past publications for this publication.
 */
export const getPastPublications = <ThrowOnError extends boolean = false>(options: Options<GetPastPublicationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPastPublicationsResponses, GetPastPublicationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/publications/v1/publication/{currentPublicationId}/past-publications',
        ...options
    });
};

/**
 * user subscriptions
 * Returns all provided user subscriptions
 *
 */
export const getMySubscription = <ThrowOnError extends boolean = false>(options?: Options<GetMySubscriptionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMySubscriptionResponses, GetMySubscriptionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/subscriptions/v1/my',
        ...options
    });
};

/**
 * Delete a users subscription
 */
export const deleteSubscription = <ThrowOnError extends boolean = false>(options: Options<DeleteSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSubscriptionResponses, DeleteSubscriptionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/subscriptions/v1/my/{subscriptionId}',
        ...options
    });
};

/**
 * Get information for specific subscription
 */
export const getSubscription = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubscriptionResponses, GetSubscriptionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/subscriptions/v1/my/{subscriptionId}',
        ...options
    });
};

/**
 * Create or update a user subscription
 */
export const createOrUpdateSubscription = <ThrowOnError extends boolean = false>(options: Options<CreateOrUpdateSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateOrUpdateSubscriptionResponses, CreateOrUpdateSubscriptionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/subscriptions/v1/my/{subscriptionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete the pub_draft of the given id including its project in case there aren't any other pub_drafts for this project
 */
export const deletePubDraft = <ThrowOnError extends boolean = false>(options: Options<DeletePubDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePubDraftResponses, DeletePubDraftErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}',
        ...options
    });
};

/**
 * Get publication draft
 */
export const getPubDraftBase = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftBaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftBaseResponses, GetPubDraftBaseErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}',
        ...options
    });
};

/**
 * Create a publication draft base
 */
export const createPubDraftBase = <ThrowOnError extends boolean = false>(options: Options<CreatePubDraftBaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreatePubDraftBaseResponses, CreatePubDraftBaseErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * create a new publication draft as a copy of an existing publication draft (in any state)
 * Create a copy of an existing initial publication draft. All data is copied except:
 * - any references to other publications (i.e. if call_for_bids was referring to an advance_notice)
 * - internal_reference
 * - project documents
 * - qna rounds and qnas
 * - involved vendors
 * - procurement_project_contributors
 * - project notification settings
 *
 */
export const copyPubDraft = <ThrowOnError extends boolean = false>(options: Options<CopyPubDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CopyPubDraftResponses, CopyPubDraftErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/copy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get publication draft detail
 */
export const getPubDraftDetail = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftDetailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftDetailResponses, GetPubDraftDetailErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/detail',
        ...options
    });
};

/**
 * Get the wizard state for a publication
 */
export const getWizardState = <ThrowOnError extends boolean = false>(options: Options<GetWizardStateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWizardStateResponses, GetWizardStateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/wizard-state',
        ...options
    });
};

/**
 * Update the wizard state for a publication
 */
export const updateWizardState = <ThrowOnError extends boolean = false>(options: Options<UpdateWizardStateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateWizardStateResponses, UpdateWizardStateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/wizard-state',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Submit the validated pub-draft for publication.
 * Submit a `validated` pub draft for publication before the `editorialDeadline` has passed.
 *
 * Due to the possibility that the deadline has passed between the validation and submission, the system will check the
 * `publicationDate / editorialDeadline` is valid / has passed.
 *
 * If at the time of submission this is invalid, the api will return an error - `412 Precondition failed`, and set the status of the pub draft to `draft`
 * as the draft is no longer valid, a new publication date must be selected.
 *
 */
export const submitPubDraft = <ThrowOnError extends boolean = false>(options: Options<SubmitPubDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmitPubDraftResponses, SubmitPubDraftErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/submit',
        ...options
    });
};

/**
 * Withdraw a submitted pub-draft for publication.
 * Withdraw a `submitted` pub draft for publication before the `editorialDeadline` has passed so that it can be edited again.
 *
 * Will set the status back to `draft`.
 *
 * Once the editorial deadline has passed the draft can't be withdrawn.
 *
 */
export const withdrawSubmittedPubDraft = <ThrowOnError extends boolean = false>(options: Options<WithdrawSubmittedPubDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WithdrawSubmittedPubDraftResponses, WithdrawSubmittedPubDraftErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/withdraw',
        ...options
    });
};

/**
 * Patch the translation languages of a pub draft
 * Set the translations for the publication. Can only be set for the initial, the first publication of a project.
 * The followup publications will use and require the set translations from the initial publication.
 *
 * Direct Awards (both variants) and the RFI do not support the `summary` type, only `complete` translations are allowed.
 * The `summary` entries will be ignored.
 *
 */
export const patchPubDraftTranslationLanguages = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftTranslationLanguagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftTranslationLanguagesResponses, PatchPubDraftTranslationLanguagesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/translation-languages',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Reorder the lots of a pub draft with lots
 */
export const reorderPubDraftLots = <ThrowOnError extends boolean = false>(options: Options<ReorderPubDraftLotsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ReorderPubDraftLotsResponses, ReorderPubDraftLotsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/lots/order',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * delete a lot of a pub draft
 */
export const deletePubDraftLot = <ThrowOnError extends boolean = false>(options: Options<DeletePubDraftLotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePubDraftLotResponses, DeletePubDraftLotErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/lots/{lotId}',
        ...options
    });
};

/**
 * Get the project info of a tender publication draft
 */
export const getPubDraftTenderProjectInfo = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftTenderProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftTenderProjectInfoResponses, GetPubDraftTenderProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/project-info',
        ...options
    });
};

/**
 * Patch the project info of a tender publication draft
 * Use the read-only `processType` to differentiate between the models of the open, selective or invitation process for the tender project info pub draft.
 *
 * Patch Rules for Fields:
 *
 * For a initial tender pub draft; all fields provided by the model for this endpoint can be patched.
 *
 * For a correction of a tender publication; almost all fields can be changed.
 * The exceptions are:
 * * The (project)`title` - can no longer change after the publication of the initial publication.
 * * `stateContractArea` - can no longer change after the publication of the initial publication.
 * * `publicationTed` - can no longer change after the publication of the initial publication.
 * * `offerTypes` - only additions are allowed, can't remove an existing selection.
 *
 * For a follow-up publication, a tender that follows an advance notice.
 * The creation of a `call_for_bids` publication from a preceding `advance_notice` is a special case.
 * Almost all fields can be changed.
 * The exceptions are:
 * * The (project)`title` - can no longer change after the publication of the initial publication.
 * * `stateContractArea` - can no longer change after the publication of the initial publication.
 *
 * Further information for the patching of data on this endpoint.
 *
 * Address Updates: If you patch an Address then you have to use the generated id.
 * The id is generated on the creation of the publication and can be obtained via the GET request.
 *
 * The `stateContractArea` selection affects wich `remediesNotice` template is used, if defined, in the `terms` step.
 *
 */
export const patchPubDraftTenderProjectInfo = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftTenderProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftTenderProjectInfoResponses, PatchPubDraftTenderProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/project-info',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the dates of a tender publication draft
 */
export const getPubDraftTenderDates = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftTenderDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftTenderDatesResponses, GetPubDraftTenderDatesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/dates',
        ...options
    });
};

/**
 * Patch the dates of a tender publication draft
 */
export const patchPubDraftTenderDates = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftTenderDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftTenderDatesResponses, PatchPubDraftTenderDatesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/dates',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the procurement data of a tender publication draft
 */
export const getPubDraftTenderProcurement = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftTenderProcurementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftTenderProcurementResponses, GetPubDraftTenderProcurementErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/procurement',
        ...options
    });
};

/**
 * Patch the procurement data of a tender publication draft
 */
export const patchPubDraftTenderProcurement = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftTenderProcurementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftTenderProcurementResponses, PatchPubDraftTenderProcurementErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/procurement',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the criteria of a tender publication draft
 */
export const getPubDraftTenderCriteria = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftTenderCriteriaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftTenderCriteriaResponses, GetPubDraftTenderCriteriaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/criteria',
        ...options
    });
};

/**
 * Patch the criteria data of a tender publication draft
 */
export const patchPubDraftTenderCriteria = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftTenderCriteriaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftTenderCriteriaResponses, PatchPubDraftTenderCriteriaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/criteria',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the terms of a tender publication draft
 */
export const getPubDraftTenderTerms = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftTenderTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftTenderTermsResponses, GetPubDraftTenderTermsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/terms',
        ...options
    });
};

/**
 * Patch the terms of a tender publication draft
 */
export const patchPubDraftTenderTerms = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftTenderTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftTenderTermsResponses, PatchPubDraftTenderTermsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/terms',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get a lot of a tender pub draft
 */
export const getPubDraftTenderLot = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftTenderLotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftTenderLotResponses, GetPubDraftTenderLotErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/lots/{lotId}',
        ...options
    });
};

/**
 * Patch the lot of a tender pub draft
 */
export const patchPubDraftTenderLot = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftTenderLotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftTenderLotResponses, PatchPubDraftTenderLotErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/lots/{lotId}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * create a new lot for the tender pub draft
 */
export const createPubDraftTenderLot = <ThrowOnError extends boolean = false>(options: Options<CreatePubDraftTenderLotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreatePubDraftTenderLotResponses, CreatePubDraftTenderLotErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/lots/{lotId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the invited vendors of a tender publication draft
 * Invited vendors are only available if project was created with processType `invitation`
 */
export const getPubDraftTenderInvitedVendors = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftTenderInvitedVendorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftTenderInvitedVendorsResponses, GetPubDraftTenderInvitedVendorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/invited-vendors',
        ...options
    });
};

/**
 * Patch the invited vendors of a tender publication draft
 * Invited vendors are only available if project was created with processType `invitation`
 */
export const patchPubDraftTenderInvitedVendors = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftTenderInvitedVendorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftTenderInvitedVendorsResponses, PatchPubDraftTenderInvitedVendorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/tender/{pubDraftId}/invited-vendors',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the project info of a competition publication draft
 */
export const getPubDraftCompetitionProjectInfo = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftCompetitionProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftCompetitionProjectInfoResponses, GetPubDraftCompetitionProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/project-info',
        ...options
    });
};

/**
 * Patch the project info of a competition publication draft
 * Use the read-only `processType` to differentiate between the models of the open, selective or invitation process.
 *
 * Patch Rules for Fields:
 *
 * For a initial competition pub draft; all fields provided by the model for this endpoint can be patched.
 *
 * For a correction of a competition publication; almost all fields can be changed.
 * The exceptions are:
 * * The (project)`title` - can no longer change after the publication of the initial publication.
 * * `stateContractArea` - can no longer change after the publication of the initial publication.
 * * `offerTypes` - only additions are allowed, can't remove an existing selection.
 *
 * For a follow-up publication, a competition that follows an advance notice.
 * The creation of a `call_for_bids` publication from a preceding `advance_notice` is a special case.
 * Almost all fields can be changed.
 * The exceptions are:
 * * The (project)`title` - can no longer change after the publication of the initial publication.
 * * `stateContractArea` - can no longer change after the publication of the initial publication.
 *
 * Further information for the patching of data on this endpoint.
 *
 * Address Updates: If you patch an Address then you have to use the generated id.
 * The id is generated on the creation of the publication and can be obtained via the GET request.
 *
 * The `stateContractArea` selection affects wich `remediesNotice` template is used, if defined, in the `terms` step.
 *
 */
export const patchPubDraftCompetitionProjectInfo = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftCompetitionProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftCompetitionProjectInfoResponses, PatchPubDraftCompetitionProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/project-info',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the dates of a competition publication draft
 */
export const getPubDraftCompetitionDates = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftCompetitionDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftCompetitionDatesResponses, GetPubDraftCompetitionDatesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/dates',
        ...options
    });
};

/**
 * Patch the dates of a competition publication draft
 */
export const patchPubDraftCompetitionDates = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftCompetitionDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftCompetitionDatesResponses, PatchPubDraftCompetitionDatesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/dates',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the procurement data of a competition publication draft
 */
export const getPubDraftCompetitionProcurement = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftCompetitionProcurementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftCompetitionProcurementResponses, GetPubDraftCompetitionProcurementErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/procurement',
        ...options
    });
};

/**
 * Patch the procurement data of a competition publication draft
 */
export const patchPubDraftCompetitionProcurement = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftCompetitionProcurementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftCompetitionProcurementResponses, PatchPubDraftCompetitionProcurementErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/procurement',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the dates of a competition publication draft
 */
export const getPubDraftCompetitionCriteria = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftCompetitionCriteriaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftCompetitionCriteriaResponses, GetPubDraftCompetitionCriteriaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/criteria',
        ...options
    });
};

/**
 * Patch the criteria data of a competition publication draft
 */
export const patchPubDraftCompetitionCriteria = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftCompetitionCriteriaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftCompetitionCriteriaResponses, PatchPubDraftCompetitionCriteriaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/criteria',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the terms of a competition publication draft
 */
export const getPubDraftCompetitionTerms = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftCompetitionTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftCompetitionTermsResponses, GetPubDraftCompetitionTermsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/terms',
        ...options
    });
};

/**
 * Patch the terms of a competition publication draft
 */
export const patchPubDraftCompetitionTerms = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftCompetitionTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftCompetitionTermsResponses, PatchPubDraftCompetitionTermsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/terms',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get a lot of a competition pub draft
 */
export const getPubDraftCompetitionLot = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftCompetitionLotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftCompetitionLotResponses, GetPubDraftCompetitionLotErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/lots/{lotId}',
        ...options
    });
};

/**
 * Patch the lot of a competition pub draft
 */
export const patchPubDraftCompetitionLot = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftCompetitionLotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftCompetitionLotResponses, PatchPubDraftCompetitionLotErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/lots/{lotId}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * create a new lot for the competition pub draft
 */
export const createPubDraftCompetitionLot = <ThrowOnError extends boolean = false>(options: Options<CreatePubDraftCompetitionLotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreatePubDraftCompetitionLotResponses, CreatePubDraftCompetitionLotErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/lots/{lotId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the invited vendors of a competition publication draft
 * Invited vendors are only available if project was created with processType `invitation`
 */
export const getPubDraftCompetitionInvitedVendors = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftCompetitionInvitedVendorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftCompetitionInvitedVendorsResponses, GetPubDraftCompetitionInvitedVendorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/invited-vendors',
        ...options
    });
};

/**
 * Patch the invited vendors of a competition publication draft
 * Invited vendors are only available if project was created with processType `invitation`
 */
export const patchPubDraftCompetitionInvitedVendors = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftCompetitionInvitedVendorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftCompetitionInvitedVendorsResponses, PatchPubDraftCompetitionInvitedVendorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/competition/{pubDraftId}/invited-vendors',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the project info of a study publication draft
 */
export const getPubDraftStudyContractProjectInfo = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftStudyContractProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftStudyContractProjectInfoResponses, GetPubDraftStudyContractProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/project-info',
        ...options
    });
};

/**
 * Patch the project info of a study-contract publication draft
 * Use the read-only `processType` to differentiate between the models of the open, selective or invitation process.
 *
 * Patch Rules for Fields:
 *
 * For a initial study-contract pub draft; all fields provided by the model for this endpoint can be patched.
 *
 * For a correction of a study-contract publication; almost all fields can be changed.
 * The exceptions are:
 * * The (project)`title` - can no longer change after the publication of the initial publication.
 * * `stateContractArea` - can no longer change after the publication of the initial publication.
 * * `offerTypes` - only additions are allowed, can't remove an existing selection.
 *
 * For a follow-up publication, a study-contract that follows an advance notice.
 * The creation of a `call_for_bids` publication from a preceding `advance_notice` is a special case.
 * Almost all fields can be changed.
 * The exceptions are:
 * * The (project)`title` - can no longer change after the publication of the initial publication.
 * * `stateContractArea` - can no longer change after the publication of the initial publication.
 *
 * Further information for the patching of data on this endpoint.
 *
 * Address Updates: If you patch an Address then you have to use the generated id.
 * The id is generated on the creation of the publication and can be obtained via the GET request.
 *
 * The `stateContractArea` selection affects wich `remediesNotice` template is used, if defined, in the `terms` step.
 *
 */
export const patchPubDraftStudyContractProjectInfo = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftStudyContractProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftStudyContractProjectInfoResponses, PatchPubDraftStudyContractProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/project-info',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the dates of a study publication draft
 */
export const getPubDraftStudyContractDates = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftStudyContractDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftStudyContractDatesResponses, GetPubDraftStudyContractDatesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/dates',
        ...options
    });
};

/**
 * Patch the dates of a study publication draft
 */
export const patchPubDraftStudyContractDates = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftStudyContractDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftStudyContractDatesResponses, PatchPubDraftStudyContractDatesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/dates',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the procurement data of a study publication draft
 */
export const getPubDraftStudyContractProcurement = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftStudyContractProcurementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftStudyContractProcurementResponses, GetPubDraftStudyContractProcurementErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/procurement',
        ...options
    });
};

/**
 * Patch the procurement data of a study publication draft
 */
export const patchPubDraftStudyContractProcurement = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftStudyContractProcurementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftStudyContractProcurementResponses, PatchPubDraftStudyContractProcurementErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/procurement',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the criteria of a study publication draft
 */
export const getPubDraftStudyContractCriteria = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftStudyContractCriteriaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftStudyContractCriteriaResponses, GetPubDraftStudyContractCriteriaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/criteria',
        ...options
    });
};

/**
 * Patch the criteria data of a study publication draft
 */
export const patchPubDraftStudyContractCriteria = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftStudyContractCriteriaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftStudyContractCriteriaResponses, PatchPubDraftStudyContractCriteriaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/criteria',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the terms of a study publication draft
 */
export const getPubDraftStudyContractTerms = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftStudyContractTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftStudyContractTermsResponses, GetPubDraftStudyContractTermsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/terms',
        ...options
    });
};

/**
 * Patch the terms of a study publication draft
 */
export const patchPubDraftStudyContractTerms = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftStudyContractTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftStudyContractTermsResponses, PatchPubDraftStudyContractTermsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/terms',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get a lot of a study pub draft
 */
export const getPubDraftStudyContractLot = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftStudyContractLotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftStudyContractLotResponses, GetPubDraftStudyContractLotErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/lots/{lotId}',
        ...options
    });
};

/**
 * Patch the lot of a study pub draft
 */
export const patchPubDraftStudyContractLot = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftStudyContractLotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftStudyContractLotResponses, PatchPubDraftStudyContractLotErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/lots/{lotId}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * create a new lot for the study pub draft
 */
export const createPubDraftStudyContractLot = <ThrowOnError extends boolean = false>(options: Options<CreatePubDraftStudyContractLotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreatePubDraftStudyContractLotResponses, CreatePubDraftStudyContractLotErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/lots/{lotId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the invited vendors of a study publication draft
 * Invited vendors are only available if project was created with processType `invitation`
 */
export const getPubDraftStudyContractInvitedVendors = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftStudyContractInvitedVendorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftStudyContractInvitedVendorsResponses, GetPubDraftStudyContractInvitedVendorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/invited-vendors',
        ...options
    });
};

/**
 * Patch the invited vendors of a study publication draft
 * Invited vendors are only available if project was created with processType `invitation`
 */
export const patchPubDraftStudyContractInvitedVendors = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftStudyContractInvitedVendorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftStudyContractInvitedVendorsResponses, PatchPubDraftStudyContractInvitedVendorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/study-contract/{pubDraftId}/invited-vendors',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the project info of a award publication draft
 */
export const getPubDraftAwardProjectInfo = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftAwardProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftAwardProjectInfoResponses, GetPubDraftAwardProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/award/{pubDraftId}/project-info',
        ...options
    });
};

/**
 * Patch the project info of a award publication draft
 * Used for publications with type `award` or `direct-award`.
 *
 * When publication type is `direct-award`, one can edit the (project)`title`, `stateContractArea` and the addresses.
 *
 * The `stateContractArea` selection affects wich `remediesNotice` template is used, if defined, in the award-decision step.
 *
 * On type `award`, only can only edit the addresses.
 *
 * Address Updates: If you patch an Address then you have to use the generated id.
 * The id is generated on the creation of the publication and can be obtained via the GET request.
 *
 */
export const patchPubDraftAwardProjectInfo = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftAwardProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftAwardProjectInfoResponses, PatchPubDraftAwardProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/award/{pubDraftId}/project-info',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the procurement data of a direct award publication draft
 */
export const getPubDraftAwardProcurement = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftAwardProcurementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftAwardProcurementResponses, GetPubDraftAwardProcurementErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v2/award/{pubDraftId}/procurement',
        ...options
    });
};

/**
 * Patch the procurement data of a direct award publication draft
 */
export const patchPubDraftAwardProcurement = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftAwardProcurementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftAwardProcurementResponses, PatchPubDraftAwardProcurementErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v2/award/{pubDraftId}/procurement',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the decision data of an award publication draft
 */
export const getPubDraftAwardDecision = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftAwardDecisionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftAwardDecisionResponses, GetPubDraftAwardDecisionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/award/{pubDraftId}/decision',
        ...options
    });
};

/**
 * Patch the decision data of an award publication draft
 */
export const patchPubDraftAwardDecision = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftAwardDecisionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftAwardDecisionResponses, PatchPubDraftAwardDecisionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/award/{pubDraftId}/decision',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the statistics data of an award publication draft
 */
export const getPubDraftAwardStatistics = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftAwardStatisticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftAwardStatisticsResponses, GetPubDraftAwardStatisticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/award/{pubDraftId}/statistics',
        ...options
    });
};

/**
 * Patch the statistics data of an award publication draft
 */
export const patchPubDraftAwardStatistics = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftAwardStatisticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftAwardStatisticsResponses, PatchPubDraftAwardStatisticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/award/{pubDraftId}/statistics',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the sustainability form data of an award publication draft
 */
export const getPubDraftAwardSustainabilityForm = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftAwardSustainabilityFormData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftAwardSustainabilityFormResponses, GetPubDraftAwardSustainabilityFormErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/award/{pubDraftId}/sustainability',
        ...options
    });
};

/**
 * Patch the sustainability form data of an award publication draft
 */
export const patchPubDraftAwardSustainabilityForm = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftAwardSustainabilityFormData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftAwardSustainabilityFormResponses, PatchPubDraftAwardSustainabilityFormErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/award/{pubDraftId}/sustainability',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the project info of a request for information pub draft
 */
export const getPubDraftRfiProjectInfo = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftRfiProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftRfiProjectInfoResponses, GetPubDraftRfiProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/rfi/{pubDraftId}/project-info',
        ...options
    });
};

/**
 * Patch the project info of a request for information pub draft
 * Patch Rules for Fields:
 *
 * For a initial rfi pub draft; all fields provided by the model for this endpoint can be patched.
 *
 * For a correction of a rfi publication; almost all fields can be changed.
 * The exceptions are:
 * * The (project)`title` - can no longer change after the publication of the initial publication.
 * * `offerTypes` - only additions are allowed, can't remove an existing selection.
 *
 * Further information for the patching of data on this endpoint.
 *
 * Address Updates: If you patch an Address then you have to use the generated id.
 * The id is generated on the creation of the publication and can be obtained via the GET request.
 *
 */
export const patchPubDraftRfiProjectInfo = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftRfiProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftRfiProjectInfoResponses, PatchPubDraftRfiProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/rfi/{pubDraftId}/project-info',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the dates of a request for information pub draft
 */
export const getPubDraftRfiDates = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftRfiDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftRfiDatesResponses, GetPubDraftRfiDatesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/rfi/{pubDraftId}/dates',
        ...options
    });
};

/**
 * Patch the dates of a request for information pub draft
 */
export const patchPubDraftRfiDates = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftRfiDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftRfiDatesResponses, PatchPubDraftRfiDatesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/rfi/{pubDraftId}/dates',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the procurement data of a request for information pub draft
 */
export const getPubDraftRfiProcurement = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftRfiProcurementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftRfiProcurementResponses, GetPubDraftRfiProcurementErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/rfi/{pubDraftId}/procurement',
        ...options
    });
};

/**
 * Patch the procurement data of a request for information pub draft
 */
export const patchPubDraftRfiProcurement = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftRfiProcurementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftRfiProcurementResponses, PatchPubDraftRfiProcurementErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/rfi/{pubDraftId}/procurement',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the terms of a request for information pub draft
 */
export const getPubDraftRfiTerms = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftRfiTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftRfiTermsResponses, GetPubDraftRfiTermsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/rfi/{pubDraftId}/terms',
        ...options
    });
};

/**
 * Patch the terms of a request for information draft
 */
export const patchPubDraftRfiTerms = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftRfiTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftRfiTermsResponses, PatchPubDraftRfiTermsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/rfi/{pubDraftId}/terms',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the data of an abandonment pub draft
 */
export const getPubDraftAbandonmentInfo = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftAbandonmentInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftAbandonmentInfoResponses, GetPubDraftAbandonmentInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/abandonment/{pubDraftId}/abandonment',
        ...options
    });
};

/**
 * Patch the data of an abandonment pub draft
 */
export const patchPubDraftAbandonmentInfo = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftAbandonmentInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftAbandonmentInfoResponses, PatchPubDraftAbandonmentInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/abandonment/{pubDraftId}/abandonment',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the information of a revocation publication draft
 */
export const getPubDraftRevocation = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftRevocationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftRevocationResponses, GetPubDraftRevocationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/revocation/{pubDraftId}/revocation',
        ...options
    });
};

/**
 * Patch the information of a revocation publication draft
 */
export const patchPubDraftRevocation = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftRevocationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftRevocationResponses, PatchPubDraftRevocationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/revocation/{pubDraftId}/revocation',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the data of a corrected pub draft
 */
export const getPubDraftCorrectionInfo = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftCorrectionInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftCorrectionInfoResponses, GetPubDraftCorrectionInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/correction/{pubDraftId}/correction',
        ...options
    });
};

/**
 * Patch the data of a pub draft correction
 */
export const patchPubDraftCorrectionInfo = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftCorrectionInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftCorrectionInfoResponses, PatchPubDraftCorrectionInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/correction/{pubDraftId}/correction',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the project info of a participant selection publication draft
 */
export const getPubDraftParticipantSelectionProjectInfo = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftParticipantSelectionProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftParticipantSelectionProjectInfoResponses, GetPubDraftParticipantSelectionProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/participant-selection/{pubDraftId}/project-info',
        ...options
    });
};

/**
 * Patch the project info of a participant selection publication draft
 * Address Updates: If you patch an Address then you have to use the generated id.
 * The id is generated on the creation of the publication and can be obtained via the GET request.
 *
 */
export const patchPubDraftParticipantSelectionProjectInfo = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftParticipantSelectionProjectInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftParticipantSelectionProjectInfoResponses, PatchPubDraftParticipantSelectionProjectInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/participant-selection/{pubDraftId}/project-info',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the participant selection data
 */
export const getPubDraftParticipantSelection = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftParticipantSelectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftParticipantSelectionResponses, GetPubDraftParticipantSelectionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/participant-selection/{pubDraftId}/participant-selection',
        ...options
    });
};

/**
 * Patch the participant selection data
 */
export const patchPubDraftParticipantSelection = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftParticipantSelectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftParticipantSelectionResponses, PatchPubDraftParticipantSelectionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/participant-selection/{pubDraftId}/participant-selection',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the notice information of a selective_offering_phase publication draft
 */
export const getPubDraftSelectiveOfferingPhaseNotice = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftSelectiveOfferingPhaseNoticeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftSelectiveOfferingPhaseNoticeResponses, GetPubDraftSelectiveOfferingPhaseNoticeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/selective-offering-phase/{pubDraftId}/notice',
        ...options
    });
};

/**
 * Patch the information of a selective_offering_phase publication draft
 */
export const patchPubDraftSelectiveOfferingPhaseNotice = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftSelectiveOfferingPhaseNoticeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftSelectiveOfferingPhaseNoticeResponses, PatchPubDraftSelectiveOfferingPhaseNoticeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/selective-offering-phase/{pubDraftId}/notice',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the dates of a selective_offering_phase publication draft
 */
export const getPubDraftSelectiveOfferingPhaseDates = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftSelectiveOfferingPhaseDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftSelectiveOfferingPhaseDatesResponses, GetPubDraftSelectiveOfferingPhaseDatesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/selective-offering-phase/{pubDraftId}/dates',
        ...options
    });
};

/**
 * Patch the dates of a selective_offering_phase publication draft
 */
export const patchPubDraftSelectiveOfferingPhaseDates = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftSelectiveOfferingPhaseDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftSelectiveOfferingPhaseDatesResponses, PatchPubDraftSelectiveOfferingPhaseDatesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/selective-offering-phase/{pubDraftId}/dates',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the criteria of a selective_offering_phase publication draft
 */
export const getPubDraftSelectiveOfferingPhaseCriteria = <ThrowOnError extends boolean = false>(options: Options<GetPubDraftSelectiveOfferingPhaseCriteriaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPubDraftSelectiveOfferingPhaseCriteriaResponses, GetPubDraftSelectiveOfferingPhaseCriteriaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/selective-offering-phase/{pubDraftId}/criteria',
        ...options
    });
};

/**
 * Patch the criteria of a selective_offering_phase publication draft
 */
export const patchPubDraftSelectiveOfferingPhaseCriteria = <ThrowOnError extends boolean = false>(options: Options<PatchPubDraftSelectiveOfferingPhaseCriteriaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPubDraftSelectiveOfferingPhaseCriteriaResponses, PatchPubDraftSelectiveOfferingPhaseCriteriaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/selective-offering-phase/{pubDraftId}/criteria',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Trigger the validation and get the result of that validation for a pub draft.
 * A call to this endpoint will trigger the validation for the given pub draft.
 *
 * It will return the validation result with the errors per available step of that draft.
 *
 * For pub drafts with lots, the validation on a lot will be handled as a step, meaning each lot will have an entry in the map, the key will be lot--LOT_ID
 * and the list of validation errors for that lot.
 *
 * See the `PubSteps` enum for the available steps in the system
 *
 * If the validation is successful i.e. the result contains no errors, the query-parameter 'dry-run' is not set to 'true' and the pub_draft is not a template, the BE will
 * - update the status of the draft to `validated`
 * - run TED validation if publication should be sent to TED
 * - calculated diff if publication is a correction
 *
 */
export const validatePubDraft = <ThrowOnError extends boolean = false>(options: Options<ValidatePubDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ValidatePubDraftResponses, ValidatePubDraftErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/validate',
        ...options
    });
};

/**
 * Get past publications for this pub-draft.
 * returns the past published pub-drafts
 */
export const getPastPublishedPubDrafts = <ThrowOnError extends boolean = false>(options: Options<GetPastPublishedPubDraftsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPastPublishedPubDraftsResponses, GetPastPublishedPubDraftsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/past-publications',
        ...options
    });
};

/**
 * Get past publication actions for this pub-draft.
 * returns the past pub-drafts actions available on this pub-draft.
 * LotId needs to be provided in case the project is created with lots as the available actions depend
 * on the status of the project in a specific lot.
 *
 */
export const getPastPublishedPubDraftActions = <ThrowOnError extends boolean = false>(options: Options<GetPastPublishedPubDraftActionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPastPublishedPubDraftActionsResponses, GetPastPublishedPubDraftActionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pub-drafts/v1/pd/{pubDraftId}/past-publication-actions',
        ...options
    });
};

/**
 * Get available roles and organizations for the current user.
 */
export const getRoles = <ThrowOnError extends boolean = false>(options?: Options<GetRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRolesResponses, GetRolesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/v1/my',
        ...options
    });
};

/**
 * Sets a role and organization combination for the current user.
 */
export const setRole = <ThrowOnError extends boolean = false>(options: Options<SetRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetRoleResponses, SetRoleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/v1/my',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of publishers
 */
export const listPublishers = <ThrowOnError extends boolean = false>(options?: Options<ListPublishersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPublishersResponses, ListPublishersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/publishers/v1',
        ...options
    });
};

/**
 * Get the publisher (Amtsblatt) assigned to my current organization
 */
export const getMyPublisher = <ThrowOnError extends boolean = false>(options?: Options<GetMyPublisherData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyPublisherResponses, GetMyPublisherErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/publishers/v1/my',
        ...options
    });
};

/**
 * Publish all answers in 'draft' state in the given qna round
 */
export const publishAnswers = <ThrowOnError extends boolean = false>(options: Options<PublishAnswersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PublishAnswersResponses, PublishAnswersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/qnas/v1/rounds/{roundId}/publish',
        ...options
    });
};

/**
 * Deletes a question in the qnas
 */
export const deleteQna = <ThrowOnError extends boolean = false>(options: Options<DeleteQnaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteQnaResponses, DeleteQnaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/qnas/v1/rounds/{roundId}/qna/{qnaId}',
        ...options
    });
};

/**
 * Updates a question in the qnas
 */
export const updateQna = <ThrowOnError extends boolean = false>(options: Options<UpdateQnaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateQnaResponses, UpdateQnaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/qnas/v1/rounds/{roundId}/qna/{qnaId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add new question
 */
export const addQuestion = <ThrowOnError extends boolean = false>(options: Options<AddQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AddQuestionResponses, AddQuestionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/qnas/v1/rounds/{roundId}/qna/{qnaId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Publish this answer
 */
export const publishQna = <ThrowOnError extends boolean = false>(options: Options<PublishQnaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PublishQnaResponses, PublishQnaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/qnas/v1/rounds/{roundId}/qna/{qnaId}/publish',
        ...options
    });
};

/**
 * Download a project document by id, authenticate via token in query parameter -- token can be obtained by:
 * /project-documents/v1/docs/{projectDocumentId}/token
 *
 */
export const downloadProjectDocument = <ThrowOnError extends boolean = false>(options: Options<DownloadProjectDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadProjectDocumentResponses, DownloadProjectDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/project-documents/v1/docs/{projectDocumentId}',
        ...options
    });
};

/**
 * Get a Download Token to fetch protected files
 */
export const getDownloadToken = <ThrowOnError extends boolean = false>(options: Options<GetDownloadTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDownloadTokenResponses, GetDownloadTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/project-documents/v1/docs/{projectDocumentId}/token',
        ...options
    });
};

/**
 * Download a zip file containing all project documents, authenticate via token in query parameter -- token can be obtained by:
 * * `/procoffices/v1/my/projects/{projectId}/documents/zip-token`
 * * `/vendors/v1/my/projects/{projectId}/documents/zip-token`
 *
 */
export const downloadProjectDocumentsZip = <ThrowOnError extends boolean = false>(options: Options<DownloadProjectDocumentsZipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadProjectDocumentsZipResponses, DownloadProjectDocumentsZipErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/project-documents/v1/docs/zip-download',
        ...options
    });
};

/**
 * Set the publication-date of a draft to today.
 * Testing-function, only available on non-productive systems!
 * Will publish the pub-draft, if it's previously submitted, on the next run of the publish-job of the middleware.
 *
 */
export const publishPubDraft = <ThrowOnError extends boolean = false>(options: Options<PublishPubDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PublishPubDraftResponses, PublishPubDraftErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/pub-drafts/{pubDraftId}/publish',
        ...options
    });
};

/**
 * mark a submitted publication as `to_publish`, override the default mechanism
 * Testing-function, only available on non-productive systems!
 *
 * This will mark the given publication as `to_publish`, overriding the calculated editorial_deadline, set it to know.
 *
 * With this, one can set the lock a publication before the system would normally lock it. Makes it possible to
 * test the cases, that depend on the state, without waiting on the fixed times that are defined by the publishers config.
 *
 * The publication needs to be `submitted`.
 *
 */
export const markAsToPublish = <ThrowOnError extends boolean = false>(options: Options<MarkAsToPublishData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarkAsToPublishResponses, MarkAsToPublishErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/pub-drafts/{pubDraftId}/mark-as-to-publish',
        ...options
    });
};

/**
 * create abandonment test scenario
 * Testing-function, only available on non-productive systems!
 *
 */
export const createAbandonmentTestScenario = <ThrowOnError extends boolean = false>(options?: Options<CreateAbandonmentTestScenarioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAbandonmentTestScenarioResponses, CreateAbandonmentTestScenarioErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/create-abandonment-test-scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * create advance_notice test scenario
 * Testing-function, only available on non-productive systems!
 *
 */
export const createAdvanceNoticeTestScenario = <ThrowOnError extends boolean = false>(options?: Options<CreateAdvanceNoticeTestScenarioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAdvanceNoticeTestScenarioResponses, CreateAdvanceNoticeTestScenarioErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/create-advance-notice-test-scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * create award test scenario
 * Testing-function, only available on non-productive systems!
 *
 */
export const createAwardTestScenario = <ThrowOnError extends boolean = false>(options?: Options<CreateAwardTestScenarioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAwardTestScenarioResponses, CreateAwardTestScenarioErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/create-award-test-scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * create call_for_bids test scenario
 * Testing-function, only available on non-productive systems!
 *
 */
export const createCallForBidsTestScenario = <ThrowOnError extends boolean = false>(options?: Options<CreateCallForBidsTestScenarioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateCallForBidsTestScenarioResponses, CreateCallForBidsTestScenarioErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/create-call-for-bids-test-scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * create correction test scenario
 * Testing-function, only available on non-productive systems!
 *
 */
export const createCorrectionTestScenario = <ThrowOnError extends boolean = false>(options?: Options<CreateCorrectionTestScenarioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateCorrectionTestScenarioResponses, CreateCorrectionTestScenarioErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/create-correction-test-scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * create direct award test scenario
 * Testing-function, only available on non-productive systems!
 *
 */
export const createDirectAwardTestScenario = <ThrowOnError extends boolean = false>(options?: Options<CreateDirectAwardTestScenarioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateDirectAwardTestScenarioResponses, CreateDirectAwardTestScenarioErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/create-direct-award-test-scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * create participant selection test scenario
 * Testing-function, only available on non-productive systems!
 *
 */
export const createParticipantSelectionTestScenario = <ThrowOnError extends boolean = false>(options?: Options<CreateParticipantSelectionTestScenarioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateParticipantSelectionTestScenarioResponses, CreateParticipantSelectionTestScenarioErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/create-participantselection-test-scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * create selective offering phase test scenario
 * Testing-function, only available on non-productive systems!
 *
 */
export const createSelectiveOfferingPhaseTestScenario = <ThrowOnError extends boolean = false>(options?: Options<CreateSelectiveOfferingPhaseTestScenarioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateSelectiveOfferingPhaseTestScenarioResponses, CreateSelectiveOfferingPhaseTestScenarioErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/create-selectiveofferingphase-test-scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * create revocation test scenario
 * Testing-function, only available on non-productive systems!
 *
 */
export const createRevocationTestScenario = <ThrowOnError extends boolean = false>(options?: Options<CreateRevocationTestScenarioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateRevocationTestScenarioResponses, CreateRevocationTestScenarioErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/create-revocation-test-scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * create request_for_inofrmation test scenario
 * Testing-function, only available on non-productive systems!
 *
 */
export const createRequestForInformationTestScenario = <ThrowOnError extends boolean = false>(options?: Options<CreateRequestForInformationTestScenarioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateRequestForInformationTestScenarioResponses, CreateRequestForInformationTestScenarioErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/v1/create-request-for-information-test-scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the list of awarded vendors and award publications based on the current user's role and organization
 */
export const exportAwardedVendors = <ThrowOnError extends boolean = false>(options: Options<ExportAwardedVendorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExportAwardedVendorsResponses, ExportAwardedVendorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/statistics/v1/my/awarded-vendors-export',
        ...options
    });
};

/**
 * Get the list of sustainability form data of awards based on the current user's role and organization
 * This export excludes sustainability form data of revoked awards or of awards of abandonend projects/lots as well as awards not having sustainability form data.
 * The result is returned as chunked json (`application/x-ndjson`). Every row has a discriminator property `selectedSustainabilityFormType` to distinguish between
 * different forms. The returned rows are sorted as following:
 * * `selectedSustainabilityFormType` (nh01, nh02, nh03, nh04, nh05)
 * * `publicationNumber` asc
 *
 */
export const exportSustainabilityForm = <ThrowOnError extends boolean = false>(options: Options<ExportSustainabilityFormData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExportSustainabilityFormResponses, ExportSustainabilityFormErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/statistics/v1/my/sustainability-export',
        ...options
    });
};

/**
 * Get the list of call_for_bids publications based on the current user's role and organization
 */
export const exportCallForBids = <ThrowOnError extends boolean = false>(options: Options<ExportCallForBidsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExportCallForBidsResponses, ExportCallForBidsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/statistics/v1/my/call-for-bids-export',
        ...options
    });
};

/**
 * Get the aggregated wto statistic data based on the provided filters and the current user's role and organization
 */
export const exportWtoStatistics = <ThrowOnError extends boolean = false>(options: Options<ExportWtoStatisticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExportWtoStatisticsResponses, ExportWtoStatisticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/statistics/v1/my/wto-statistics',
        ...options
    });
};

/**
 * Get the content for a page identified by given PageName.
 */
export const getContentByPageName = <ThrowOnError extends boolean = false>(options: Options<GetContentByPageNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContentByPageNameResponses, GetContentByPageNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/static/v1/pages/{pageName}',
        ...options
    });
};

/**
 * Patch the whole set of content-components over all tabs for a page identified by given PageName.
 * Changing the type of an existing content-component isn't possible. A content-component with a new id and type is needed, which results in the old component with the old type to be deleted in the database.
 *
 */
export const patchContentByPageName = <ThrowOnError extends boolean = false>(options: Options<PatchContentByPageNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchContentByPageNameResponses, PatchContentByPageNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/static/v1/pages/{pageName}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get the digital submissions for a project
 * provide a lotId if project was created with lots
 */
export const getVendorDigitalSubmissions = <ThrowOnError extends boolean = false>(options: Options<GetVendorDigitalSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVendorDigitalSubmissionsResponses, GetVendorDigitalSubmissionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/projects/{projectId}/digital-submissions',
        ...options
    });
};

/**
 * Delete an existing submission for a project
 */
export const deleteVendorDigitalSubmission = <ThrowOnError extends boolean = false>(options: Options<DeleteVendorDigitalSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVendorDigitalSubmissionResponses, DeleteVendorDigitalSubmissionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/projects/{projectId}/digital-submissions/{vendorDigitalSubmissionId}',
        ...options
    });
};

/**
 * Get the digital submission base information
 */
export const getVendorDigitalSubmission = <ThrowOnError extends boolean = false>(options: Options<GetVendorDigitalSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVendorDigitalSubmissionResponses, GetVendorDigitalSubmissionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/projects/{projectId}/digital-submissions/{vendorDigitalSubmissionId}',
        ...options
    });
};

/**
 * Create a new submission for a project
 */
export const createVendorDigitalSubmission = <ThrowOnError extends boolean = false>(options: Options<CreateVendorDigitalSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateVendorDigitalSubmissionResponses, CreateVendorDigitalSubmissionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/projects/{projectId}/digital-submissions/{vendorDigitalSubmissionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Submit the vendor-submission. The submission will be visible for the procurement office after the offer-deadline
 * has been reached.
 *
 */
export const submitVendorDigitalSubmission = <ThrowOnError extends boolean = false>(options: Options<SubmitVendorDigitalSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmitVendorDigitalSubmissionResponses, SubmitVendorDigitalSubmissionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/digital-submissions/{vendorDigitalSubmissionId}/submit',
        ...options
    });
};

/**
 * Remove a lot from the current submission.
 *
 */
export const removeLotFromVendorDigitalSubmission = <ThrowOnError extends boolean = false>(options: Options<RemoveLotFromVendorDigitalSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveLotFromVendorDigitalSubmissionResponses, RemoveLotFromVendorDigitalSubmissionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/digital-submissions/{vendorDigitalSubmissionId}/lots/{lotId}',
        ...options
    });
};

/**
 * Add an available lot to the current submission.
 *
 */
export const addLotToVendorDigitalSubmission = <ThrowOnError extends boolean = false>(options: Options<AddLotToVendorDigitalSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AddLotToVendorDigitalSubmissionResponses, AddLotToVendorDigitalSubmissionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/digital-submissions/{vendorDigitalSubmissionId}/lots/{lotId}',
        ...options
    });
};

/**
 * get the vendor digital submissions documents for a submissions
 * get documents of a vendor digital submission. If no lotId as query parameter is provided, all generic documents attached
 * to the submission are returned. If the submission is related to a specific lot (offering submission in the second phase
 * of a selective process), lotId of related lot must be provided to filter correct documents
 *
 */
export const getVendorDigitalSubmissionDocuments = <ThrowOnError extends boolean = false>(options: Options<GetVendorDigitalSubmissionDocumentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVendorDigitalSubmissionDocumentsResponses, GetVendorDigitalSubmissionDocumentsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/digital-submissions/{vendorDigitalSubmissionId}/documents',
        ...options
    });
};

/**
 * delete a vendor digital submission document
 * Delete the uploaded vendor digital submission document.
 *
 */
export const deleteVendorDigitalSubmissionDocument = <ThrowOnError extends boolean = false>(options: Options<DeleteVendorDigitalSubmissionDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVendorDigitalSubmissionDocumentResponses, DeleteVendorDigitalSubmissionDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/digital-submissions/{vendorDigitalSubmissionId}/documents/{vendorDigitalSubmissionDocumentId}',
        ...options
    });
};

/**
 * Upload a vendor submission document
 */
export const uploadVendorDigitalSubmissionDocument = <ThrowOnError extends boolean = false>(options: Options<UploadVendorDigitalSubmissionDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadVendorDigitalSubmissionDocumentResponses, UploadVendorDigitalSubmissionDocumentErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/digital-submissions/{vendorDigitalSubmissionId}/documents/{vendorDigitalSubmissionDocumentId}/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Add an existing vendor document to the current submission
 */
export const addVendorDigitalSubmissionDocumentFromVendorDocument = <ThrowOnError extends boolean = false>(options: Options<AddVendorDigitalSubmissionDocumentFromVendorDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AddVendorDigitalSubmissionDocumentFromVendorDocumentResponses, AddVendorDigitalSubmissionDocumentFromVendorDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendors/v1/my/digital-submissions/{vendorDigitalSubmissionId}/documents/{vendorDigitalSubmissionDocumentId}/add-vendor-document',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Download a vendor digital submission document by id, authenticate via token in query parameter -- token can be obtained by:
 * '/vendor-digital-submission-documents/v1/docs/{vendorDigitalSubmissionDocumentId}/token'
 *
 */
export const downloadVendorDigitalSubmissionDocument = <ThrowOnError extends boolean = false>(options: Options<DownloadVendorDigitalSubmissionDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadVendorDigitalSubmissionDocumentResponses, DownloadVendorDigitalSubmissionDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendor-digital-submission-documents/v1/docs/{vendorDigitalSubmissionDocumentId}',
        ...options
    });
};

/**
 * Get a Download Token to fetch vendor digital submission document files
 */
export const getVendorDigitalSubmissionDocumentDownloadToken = <ThrowOnError extends boolean = false>(options: Options<GetVendorDigitalSubmissionDocumentDownloadTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVendorDigitalSubmissionDocumentDownloadTokenResponses, GetVendorDigitalSubmissionDocumentDownloadTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendor-digital-submission-documents/v1/docs/{vendorDigitalSubmissionDocumentId}/token',
        ...options
    });
};